{
  "Forms": {
    "Checkbox": {
      "ContentCol": {
        "ItemSpacing": {
          "SM": {
            "value": "{core.dimensionPX.0}",
            "type": "spacing",
            "description": "Controls the vertical spacing between LabelNextToControl and the Caption.",
            "oldPath": "Forms.Checkbox.SM.ContentCol.ItemSpacing"
          },
          "MD": {
            "value": "{core.dimensionPX.0}",
            "type": "spacing",
            "description": "Controls the vertical spacing between LabelNextToControl and the Caption.",
            "oldPath": "Forms.Checkbox.MD.ContentCol.ItemSpacing"
          },
          "LG": {
            "value": "{core.dimensionPX.0}",
            "type": "spacing",
            "description": "Controls the vertical spacing between LabelNextToControl and the Caption.",
            "oldPath": "Forms.Checkbox.LG.ContentCol.ItemSpacing"
          }
        },
        "PaddingTop": {
          "SM": {
            "value": "{core.dimensionREM.0}",
            "type": "spacing",
            "description": "Can be used to verticaly align the Content of the TextContainer against the Control",
            "oldPath": "Forms.Checkbox.SM.ContentCol.PaddingTop"
          },
          "MD": {
            "value": "{core.dimensionREM.0}",
            "type": "spacing",
            "description": "Can be used to verticaly align the Content of the TextContainer against the Control",
            "oldPath": "Forms.Checkbox.MD.ContentCol.PaddingTop"
          },
          "LG": {
            "value": "{core.dimensionREM.0}",
            "type": "spacing",
            "description": "Can be used to verticaly align the Content of the TextContainer against the Control",
            "oldPath": "Forms.Checkbox.LG.ContentCol.PaddingTop"
          }
        }
      },
      "ContentRow": {
        "ItemSpacing": {
          "SM": {
            "value": "{core.dimensionPX.8}",
            "type": "spacing",
            "description": "Controls the horizontal spacing between the Control and the Label",
            "oldPath": "Forms.Checkbox.SM.MainContainer.ItemSpacing"
          },
          "MD": {
            "value": "{core.dimensionPX.8}",
            "type": "spacing",
            "description": "Controls the horizontal spacing between the Control and the Label",
            "oldPath": "Forms.Checkbox.MD.MainContainer.ItemSpacing"
          },
          "LG": {
            "value": "{core.dimensionPX.12}",
            "type": "spacing",
            "description": "Controls the horizontal spacing between the Control and the Label",
            "oldPath": "Forms.Checkbox.LG.MainContainer.ItemSpacing"
          }
        }
      },
      "ControlWrapper": {
        "PaddingTop": {
          "SM": {
            "value": "0",
            "type": "spacing",
            "description": "Can be used to align the checkbox control against the text",
            "oldPath": "Forms.Checkbox.SM.ControlWrapper.TopMargin"
          },
          "MD": {
            "value": "{core.dimensionREM.4}",
            "type": "spacing",
            "description": "Can be used to align the checkbox control against the text",
            "oldPath": "Forms.Checkbox.MD.ControlWrapper.TopMargin"
          },
          "LG": {
            "value": "{core.dimensionREM.2}",
            "type": "spacing",
            "description": "Can be used to align the checkbox control against the text",
            "oldPath": "Forms.Checkbox.LG.ControlWrapper.TopMargin"
          }
        }
      },
      "Control": {
        "Container": {
          "BackgroundColor": {
            "Active": {
              "Rest": {
                "value": "{q.surface.brand.primary.rest}",
                "type": "color",
                "description": "Also applies to indeterminate",
                "oldPath": "Forms.Checkbox.Control.Background.Selected.Fill.[state]"
              },
              "Hover": {
                "value": "{q.surface.brand.primary.hover}",
                "type": "color",
                "description": "Also applies to indeterminate",
                "oldPath": "Forms.Checkbox.Control.Background.Selected.Fill.[state]"
              },
              "Pressed": {
                "value": "{q.surface.brand.primary.pressed}",
                "type": "color",
                "description": "Also applies to indeterminate",
                "oldPath": "Forms.Checkbox.Control.Background.Selected.Fill.[state]"
              },
              "Focus": {
                "value": "{q.surface.brand.primary.rest}",
                "type": "color",
                "description": "Also applies to indeterminate",
                "oldPath": "Forms.Checkbox.Control.Background.Selected.Fill.[state]"
              },
              "Disabled": {
                "value": "{q.surface.disabled.alpha}",
                "type": "color",
                "description": "Also applies to indeterminate",
                "oldPath": "Forms.Checkbox.Control.Background.Selected.Fill.[state]"
              },
              "ReadOnly": {
                "value": "{q.surface.disabled.alpha}",
                "type": "color",
                "description": "Also applies to indeterminate",
                "oldPath": "Forms.Checkbox.Control.Background.Selected.Fill.[state]"
              }
            },
            "Inactive": {
              "Rest": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "description": "",
                "oldPath": "Forms.Checkbox.Control.Background.Unselected.Fill.[state]"
              },
              "Hover": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "description": "",
                "oldPath": "Forms.Checkbox.Control.Background.Unselected.Fill.[state]"
              },
              "Pressed": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "description": "",
                "oldPath": "Forms.Checkbox.Control.Background.Unselected.Fill.[state]"
              },
              "Focus": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "description": "",
                "oldPath": "Forms.Checkbox.Control.Background.Unselected.Fill.[state]"
              },
              "Disabled": {
                "value": "{q.content.ondisabled.inverted}",
                "type": "color",
                "description": "",
                "oldPath": "Forms.Checkbox.Control.Background.Unselected.Fill.[state]"
              },
              "ReadOnly": {
                "value": "{q.content.ondisabled.inverted}",
                "type": "color",
                "description": "",
                "oldPath": "Forms.Checkbox.Control.Background.Unselected.Fill.[state]"
              },
              "Error": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "description": "",
                "oldPath": "Forms.Checkbox.Control.Background.Unselected.Fill.[state]"
              }
            }
          },
          "BorderColor": {
            "Active": {
              "Rest": {
                "value": "{q.stroke.none}",
                "type": "color",
                "description": "also applies to indeterminate",
                "oldPath": "Forms.Checkbox.Control.Background.Selected.Stroke.Rest"
              },
              "Hover": {
                "value": "{q.stroke.none}",
                "type": "color",
                "description": "also applies to indeterminate",
                "oldPath": "Forms.Checkbox.Control.Background.Selected.Stroke.Hover"
              },
              "Pressed": {
                "value": "{q.stroke.none}",
                "type": "color",
                "description": "also applies to indeterminate",
                "oldPath": "Forms.Checkbox.Control.Background.Selected.Stroke.Pressed"
              },
              "Focus": {
                "value": "{q.stroke.none}",
                "type": "color",
                "description": "also applies to indeterminate",
                "oldPath": "Forms.Checkbox.Control.Background.Selected.Stroke.Focus"
              },
              "Disabled": {
                "value": "{q.stroke.none}",
                "type": "color",
                "description": "also applies to indeterminate",
                "oldPath": "Forms.Checkbox.Control.Background.Selected.Stroke.Disabled"
              },
              "ReadOnly": {
                "value": "{q.stroke.none}",
                "type": "color",
                "description": "also applies to indeterminate",
                "oldPath": "Forms.Checkbox.Control.Background.Selected.Stroke.ReadOnly"
              }
            },
            "Inactive": {
              "Rest": {
                "value": "{q.stroke.brand.beta.rest}",
                "type": "color",
                "oldPath": "Forms.Checkbox.Control.Background.Unselected.Stroke.Rest"
              },
              "Hover": {
                "value": "{q.stroke.brand.beta.hover}",
                "type": "color",
                "oldPath": "Forms.Checkbox.Control.Background.Unselected.Stroke.Hover"
              },
              "Pressed": {
                "value": "{q.stroke.brand.beta.pressed}",
                "type": "color",
                "oldPath": "Forms.Checkbox.Control.Background.Unselected.Stroke.Pressed"
              },
              "Focus": {
                "value": "{q.stroke.brand.beta.rest}",
                "type": "color",
                "oldPath": "Forms.Checkbox.Control.Background.Unselected.Stroke.Focus"
              },
              "Disabled": {
                "value": "{q.stroke.disabled.beta}",
                "type": "color",
                "oldPath": "Forms.Checkbox.Control.Background.Unselected.Stroke.Disabled"
              },
              "ReadOnly": {
                "value": "{q.stroke.readonly}",
                "type": "color",
                "oldPath": "Forms.Checkbox.Control.Background.Unselected.Stroke.ReadOnly"
              },
              "Error": {
                "value": "{q.stroke.error}",
                "type": "color",
                "oldPath": "Forms.Checkbox.Control.Background.Unselected.Stroke.Error"
              }
            }
          },
          "BorderWidth": {
            "SM": {
              "Active": {
                "Rest": {
                  "value": "{core.dimensionPX.0}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.SM.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.SM.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.SM.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.SM.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.SM.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Error": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.SM.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                }
              },
              "Inactive": {
                "Rest": {
                  "value": "{core.dimensionPX.1}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.SM.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.SM.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.SM.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.SM.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.SM.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Error": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.SM.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                }
              }
            },
            "MD": {
              "Active": {
                "Rest": {
                  "value": "{core.dimensionPX.0}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.MD.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.MD.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.MD.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.MD.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.MD.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Error": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.MD.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                }
              },
              "Inactive": {
                "Rest": {
                  "value": "{core.dimensionPX.1}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.MD.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.MD.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.MD.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.MD.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.MD.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Error": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.MD.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                }
              }
            },
            "LG": {
              "Active": {
                "Rest": {
                  "value": "{core.dimensionPX.0}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.LG.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.LG.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.LG.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.LG.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.LG.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Error": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.LG.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                }
              },
              "Inactive": {
                "Rest": {
                  "value": "{core.dimensionPX.1}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.LG.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.LG.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.LG.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.LG.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.LG.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Error": {
                  "value": "{Forms.Checkbox.Control.Container.BorderWidth.LG.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                }
              }
            }
          },
          "Border": {
            "SM": {
              "Active": {
                "Rest": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Active.Rest}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.SM.Active.Rest}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Active.Hover}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.SM.Active.Hover}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Active.Pressed}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.SM.Active.Pressed}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Active.Focus}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.SM.Active.Focus}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Active.Disabled}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.SM.Active.Disabled}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Active.ReadOnly}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.SM.Active.ReadOnly}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Error": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Active.Error}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.SM.Active.Error}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                }
              },
              "Inactive": {
                "Rest": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Inactive.Rest}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.SM.Inactive.Rest}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "Forms.Checkbox.Control.Unselected.[state]"
                },
                "Hover": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Inactive.Hover}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.SM.Inactive.Hover}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "Forms.Checkbox.Control.Unselected.[state]"
                },
                "Pressed": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Inactive.Pressed}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.SM.Inactive.Pressed}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "Forms.Checkbox.Control.Unselected.[state]"
                },
                "Focus": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Inactive.Focus}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.SM.Inactive.Focus}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "Forms.Checkbox.Control.Unselected.[state]"
                },
                "Disabled": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Inactive.Disabled}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.SM.Inactive.Disabled}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "Forms.Checkbox.Control.Unselected.[state]"
                },
                "ReadOnly": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Inactive.ReadOnly}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.SM.Inactive.ReadOnly}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "Forms.Checkbox.Control.Unselected.[state]"
                },
                "Error": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Inactive.Error}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.SM.Inactive.Error}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "Forms.Checkbox.Control.Unselected.[state]"
                }
              }
            },
            "MD": {
              "Active": {
                "Rest": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Active.Rest}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.MD.Active.Rest}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Active.Hover}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.MD.Active.Hover}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Active.Pressed}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.MD.Active.Pressed}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Active.Focus}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.MD.Active.Focus}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Active.Disabled}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.MD.Active.Disabled}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Active.ReadOnly}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.MD.Active.ReadOnly}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Error": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Active.Error}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.MD.Active.Error}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                }
              },
              "Inactive": {
                "Rest": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Inactive.Rest}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.MD.Inactive.Rest}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "Forms.Checkbox.Control.Unselected.[state]"
                },
                "Hover": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Inactive.Hover}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.MD.Inactive.Hover}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "Forms.Checkbox.Control.Unselected.[state]"
                },
                "Pressed": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Inactive.Pressed}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.MD.Inactive.Pressed}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "Forms.Checkbox.Control.Unselected.[state]"
                },
                "Focus": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Inactive.Focus}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.MD.Inactive.Focus}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "Forms.Checkbox.Control.Unselected.[state]"
                },
                "Disabled": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Inactive.Disabled}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.MD.Inactive.Disabled}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "Forms.Checkbox.Control.Unselected.[state]"
                },
                "ReadOnly": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Inactive.ReadOnly}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.MD.Inactive.ReadOnly}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "Forms.Checkbox.Control.Unselected.[state]"
                },
                "Error": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Inactive.Error}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.MD.Inactive.Error}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "Forms.Checkbox.Control.Unselected.[state]"
                }
              }
            },
            "LG": {
              "Active": {
                "Rest": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Active.Rest}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.LG.Active.Rest}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Active.Hover}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.LG.Active.Hover}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Active.Pressed}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.LG.Active.Pressed}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Active.Focus}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.LG.Active.Focus}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Active.Disabled}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.LG.Active.Disabled}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Active.ReadOnly}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.LG.Active.ReadOnly}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Error": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Active.Error}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.LG.Active.Error}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                }
              },
              "Inactive": {
                "Rest": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Inactive.Rest}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.LG.Inactive.Rest}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "Forms.Checkbox.Control.Unselected.[state]"
                },
                "Hover": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Inactive.Hover}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.LG.Inactive.Hover}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "Forms.Checkbox.Control.Unselected.[state]"
                },
                "Pressed": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Inactive.Pressed}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.LG.Inactive.Pressed}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "Forms.Checkbox.Control.Unselected.[state]"
                },
                "Focus": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Inactive.Focus}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.LG.Inactive.Focus}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "Forms.Checkbox.Control.Unselected.[state]"
                },
                "Disabled": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Inactive.Disabled}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.LG.Inactive.Disabled}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "Forms.Checkbox.Control.Unselected.[state]"
                },
                "ReadOnly": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Inactive.ReadOnly}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.LG.Inactive.ReadOnly}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "Forms.Checkbox.Control.Unselected.[state]"
                },
                "Error": {
                  "value": {
                    "color": "{Forms.Checkbox.Control.Container.BorderColor.Inactive.Error}",
                    "width": "{Forms.Checkbox.Control.Container.BorderWidth.LG.Inactive.Error}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "Forms.Checkbox.Control.Unselected.[state]"
                }
              }
            }
          },
          "BorderRadius": {
            "SM": {
              "value": "{core.borderRadius.SM}",
              "type": "borderRadius",
              "oldPath": "Forms.Checkbox.Control.BorderRadius"
            },
            "MD": {
              "value": "{Forms.Checkbox.Control.Container.BorderRadius}",
              "type": "borderRadius",
              "oldPath": "None"
            },
            "LG": {
              "value": "{Forms.Checkbox.Control.Container.BorderRadius}",
              "type": "borderRadius",
              "oldPath": "None"
            }
          },
          "Size": {
            "SM": {
              "value": "{core.dimensionPX.16}",
              "type": "sizing",
              "oldPath": "Forms.Checkbox.SM.Control.Background.Sizing.[Unselected/Selected/].[state]. Please note: This token consolidates a lot of tokens, as states and toggle states won't play a role for the Container Size"
            },
            "MD": {
              "value": "{core.dimensionPX.16}",
              "type": "sizing",
              "oldPath": "Forms.Checkbox.MD.Control.Background.Sizing.[Unselected/Selected/].[state]. Please note: This token consolidates a lot of tokens, as states and toggle states won't play a role for the Container Size"
            },
            "LG": {
              "value": "{core.dimensionPX.20}",
              "type": "sizing",
              "oldPath": "Forms.Checkbox.LG.Control.Background.Sizing.[Unselected/Selected/].[state]. Please note: This token consolidates a lot of tokens, as states and toggle states won't play a role for the Container Size"
            }
          }
        },
        "Icon": {
          "IconColor": {
            "Active": {
              "Rest": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "description": "also applies to indeterminate",
                "oldPath": "Forms.Checkbox.Control.Icon.Selected.Fill.Rest"
              },
              "Hover": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "description": "also applies to indeterminate",
                "oldPath": "Forms.Checkbox.Control.Icon.Selected.Fill.Hover"
              },
              "Pressed": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "description": "also applies to indeterminate",
                "oldPath": "Forms.Checkbox.Control.Icon.Selected.Fill.Pressed"
              },
              "Focus": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "description": "also applies to indeterminate",
                "oldPath": "Forms.Checkbox.Control.Icon.Selected.Fill.Focus"
              },
              "Disabled": {
                "value": "{q.content.ondisabled.inverted}",
                "type": "color",
                "description": "also applies to indeterminate",
                "oldPath": "Forms.Checkbox.Control.Icon.Selected.Fill.Disabled"
              },
              "ReadOnly": {
                "value": "{q.content.ondisabled.inverted}",
                "type": "color",
                "description": "also applies to indeterminate",
                "oldPath": "Forms.Checkbox.Control.Icon.Selected.Fill.ReadOnly"
              }
            },

            "Inactive": {
              "Rest": {
                "value": "{q.surface.none}",
                "type": "color",
                "oldPath": "Forms.Checkbox.Control.Icon.Unselected.Fill.Rest"
              },
              "Hover": {
                "value": "{q.surface.none}",
                "type": "color",
                "oldPath": "Forms.Checkbox.Control.Icon.Unselected.Fill.Hover"
              },
              "Pressed": {
                "value": "{q.surface.none}",
                "type": "color",
                "oldPath": "Forms.Checkbox.Control.Icon.Unselected.Fill.Pressed"
              },
              "Focus": {
                "value": "{q.surface.none}",
                "type": "color",
                "oldPath": "Forms.Checkbox.Control.Icon.Unselected.Fill.Focus"
              },
              "Disabled": {
                "value": "{q.surface.none}",
                "type": "color",
                "oldPath": "Forms.Checkbox.Control.Icon.Unselected.Fill.Disabled"
              },
              "ReadOnly": {
                "value": "{q.surface.none}",
                "type": "color",
                "oldPath": "Forms.Checkbox.Control.Icon.Unselected.Fill.ReadOnly"
              },
              "Error": {
                "value": "{q.surface.none}",
                "type": "color",
                "oldPath": "Forms.Checkbox.Control.Icon.Unselected.Fill.Error"
              }
            }
          },
          "IconSize": {
            "SM": {
              "Rest": {
                "value": "{core.dimensionPX.16}",
                "type": "sizing",
                "oldPath": "Forms.Checkbox.SM.Control.Icon.Sizing.[Unselected/Selected].[state] - Please note: If the Checkbox is active or inactive should ususally not affect the icon-size. Thats why it is not part of the tokenpath anymore"
              },
              "Hover": {
                "value": "{Forms.Checkbox.Control.IconSize.SM}",
                "type": "sizing",
                "oldPath": "Forms.Checkbox.SM.Control.Icon.Sizing.[Unselected/Selected].[state] - Please note: If the Checkbox is active or inactive should ususally not affect the icon-size. Thats why it is not part of the tokenpath anymore"
              },
              "Pressed": {
                "value": "{Forms.Checkbox.Control.IconSize.SM}",
                "type": "sizing",
                "oldPath": "Forms.Checkbox.SM.Control.Icon.Sizing.[Unselected/Selected].[state] - Please note: If the Checkbox is active or inactive should ususally not affect the icon-size. Thats why it is not part of the tokenpath anymore"
              },
              "Focus": {
                "value": "{Forms.Checkbox.Control.IconSize.SM}",
                "type": "sizing",
                "oldPath": "Forms.Checkbox.SM.Control.Icon.Sizing.[Unselected/Selected].[state] - Please note: If the Checkbox is active or inactive should ususally not affect the icon-size. Thats why it is not part of the tokenpath anymore"
              },
              "Disabled": {
                "value": "{Forms.Checkbox.Control.IconSize.SM}",
                "type": "sizing",
                "oldPath": "Forms.Checkbox.SM.Control.Icon.Sizing.[Unselected/Selected].[state] - Please note: If the Checkbox is active or inactive should ususally not affect the icon-size. Thats why it is not part of the tokenpath anymore"
              },
              "ReadOnly": {
                "value": "{Forms.Checkbox.Control.IconSize.SM}",
                "type": "sizing",
                "oldPath": "Forms.Checkbox.SM.Control.Icon.Sizing.[Unselected/Selected].[state] - Please note: If the Checkbox is active or inactive should ususally not affect the icon-size. Thats why it is not part of the tokenpath anymore"
              },
              "Error": {
                "value": "{Forms.Checkbox.Control.IconSize.SM}",
                "type": "sizing",
                "oldPath": "Forms.Checkbox.SM.Control.Icon.Sizing.[Unselected/Selected].[state] - Please note: If the Checkbox is active or inactive should ususally not affect the icon-size. Thats why it is not part of the tokenpath anymore"
              }
            },
            "MD": {
              "Rest": {
                "value": "{core.dimensionPX.16}",
                "type": "sizing",
                "oldPath": "Forms.Checkbox.SM.Control.Icon.Sizing.[Unselected/Selected].[state] - Please note: If the Checkbox is active or inactive should ususally not affect the icon-size. Thats why it is not part of the tokenpath anymore"
              },
              "Hover": {
                "value": "{Forms.Checkbox.Control.IconSize.MD}",
                "type": "sizing",
                "oldPath": "Forms.Checkbox.SM.Control.Icon.Sizing.[Unselected/Selected].[state] - Please note: If the Checkbox is active or inactive should ususally not affect the icon-size. Thats why it is not part of the tokenpath anymore"
              },
              "Pressed": {
                "value": "{Forms.Checkbox.Control.IconSize.MD}",
                "type": "sizing",
                "oldPath": "Forms.Checkbox.SM.Control.Icon.Sizing.[Unselected/Selected].[state] - Please note: If the Checkbox is active or inactive should ususally not affect the icon-size. Thats why it is not part of the tokenpath anymore"
              },
              "Focus": {
                "value": "{Forms.Checkbox.Control.IconSize.MD}",
                "type": "sizing",
                "oldPath": "Forms.Checkbox.SM.Control.Icon.Sizing.[Unselected/Selected].[state] - Please note: If the Checkbox is active or inactive should ususally not affect the icon-size. Thats why it is not part of the tokenpath anymore"
              },
              "Disabled": {
                "value": "{Forms.Checkbox.Control.IconSize.MD}",
                "type": "sizing",
                "oldPath": "Forms.Checkbox.SM.Control.Icon.Sizing.[Unselected/Selected].[state] - Please note: If the Checkbox is active or inactive should ususally not affect the icon-size. Thats why it is not part of the tokenpath anymore"
              },
              "ReadOnly": {
                "value": "{Forms.Checkbox.Control.IconSize.MD}",
                "type": "sizing",
                "oldPath": "Forms.Checkbox.SM.Control.Icon.Sizing.[Unselected/Selected].[state] - Please note: If the Checkbox is active or inactive should ususally not affect the icon-size. Thats why it is not part of the tokenpath anymore"
              },
              "Error": {
                "value": "{Forms.Checkbox.Control.IconSize.MD}",
                "type": "sizing",
                "oldPath": "Forms.Checkbox.SM.Control.Icon.Sizing.[Unselected/Selected].[state] - Please note: If the Checkbox is active or inactive should ususally not affect the icon-size. Thats why it is not part of the tokenpath anymore"
              }
            },
            "LG": {
              "Rest": {
                "value": "{core.dimensionPX.20}",
                "type": "sizing",
                "oldPath": "Forms.Checkbox.SM.Control.Icon.Sizing.[Unselected/Selected].[state] - Please note: If the Checkbox is active or inactive should ususally not affect the icon-size. Thats why it is not part of the tokenpath anymore"
              },
              "Hover": {
                "value": "{Forms.Checkbox.Control.IconSize.LG}",
                "type": "sizing",
                "oldPath": "Forms.Checkbox.SM.Control.Icon.Sizing.[Unselected/Selected].[state] - Please note: If the Checkbox is active or inactive should ususally not affect the icon-size. Thats why it is not part of the tokenpath anymore"
              },
              "Pressed": {
                "value": "{Forms.Checkbox.Control.IconSize.LG}",
                "type": "sizing",
                "oldPath": "Forms.Checkbox.SM.Control.Icon.Sizing.[Unselected/Selected].[state] - Please note: If the Checkbox is active or inactive should ususally not affect the icon-size. Thats why it is not part of the tokenpath anymore"
              },
              "Focus": {
                "value": "{Forms.Checkbox.Control.IconSize.LG}",
                "type": "sizing",
                "oldPath": "Forms.Checkbox.SM.Control.Icon.Sizing.[Unselected/Selected].[state] - Please note: If the Checkbox is active or inactive should ususally not affect the icon-size. Thats why it is not part of the tokenpath anymore"
              },
              "Disabled": {
                "value": "{Forms.Checkbox.Control.IconSize.LG}",
                "type": "sizing",
                "oldPath": "Forms.Checkbox.SM.Control.Icon.Sizing.[Unselected/Selected].[state] - Please note: If the Checkbox is active or inactive should ususally not affect the icon-size. Thats why it is not part of the tokenpath anymore"
              },
              "ReadOnly": {
                "value": "{Forms.Checkbox.Control.IconSize.LG}",
                "type": "sizing",
                "oldPath": "Forms.Checkbox.SM.Control.Icon.Sizing.[Unselected/Selected].[state] - Please note: If the Checkbox is active or inactive should ususally not affect the icon-size. Thats why it is not part of the tokenpath anymore"
              },
              "Error": {
                "value": "{Forms.Checkbox.Control.IconSize.LG}",
                "type": "sizing",
                "oldPath": "Forms.Checkbox.SM.Control.Icon.Sizing.[Unselected/Selected].[state] - Please note: If the Checkbox is active or inactive should ususally not affect the icon-size. Thats why it is not part of the tokenpath anymore"
              }
            }
          }
        }
      }
    },
    "Radio": {
      "ContentCol": {
        "ItemSpacing": {
          "SM": {
            "value": "{core.dimensionPX.0}",
            "type": "spacing",
            "description": "Controls the vertical spacing between LabelNextToControl and the Caption.",
            "oldPath": "Forms.Radio.SM.ContentCol.ItemSpacing"
          },
          "MD": {
            "value": "{core.dimensionPX.0}",
            "type": "spacing",
            "description": "Controls the vertical spacing between LabelNextToControl and the Caption.",
            "oldPath": "Forms.Radio.MD.ContentCol.ItemSpacing"
          },
          "LG": {
            "value": "{core.dimensionPX.0}",
            "type": "spacing",
            "description": "Controls the vertical spacing between LabelNextToControl and the Caption.",
            "oldPath": "Forms.Radio.LG.ContentCol.ItemSpacing"
          }
        },
        "PaddingTop": {
          "SM": {
            "value": "{core.dimensionREM.0}",
            "type": "spacing",
            "description": "Can be used to verticaly align the Content of the TextContainer against the Control",
            "oldPath": "Forms.Radio.SM.ContentCol.PaddingTop"
          },
          "MD": {
            "value": "{core.dimensionREM.0}",
            "type": "spacing",
            "description": "Can be used to verticaly align the Content of the TextContainer against the Control",
            "oldPath": "Forms.Radio.MD.ContentCol.PaddingTop"
          },
          "LG": {
            "value": "{core.dimensionREM.0}",
            "type": "spacing",
            "description": "Can be used to verticaly align the Content of the TextContainer against the Control",
            "oldPath": "Forms.Radio.LG.ContentCol.PaddingTop"
          }
        }
      },
      "ContentRow": {
        "ItemSpacing": {
          "SM": {
            "value": "{core.dimensionPX.8}",
            "type": "spacing",
            "description": "Controls the horizontal spacing between the Control and the Label",
            "oldPath": "Forms.Radio.SM.ContentRow.ItemSpacing"
          },
          "MD": {
            "value": "{core.dimensionPX.8}",
            "type": "spacing",
            "description": "Controls the horizontal spacing between the Control and the Label",
            "oldPath": "Forms.Radio.MD.ContentRow.ItemSpacing"
          },
          "LG": {
            "value": "{core.dimensionPX.12}",
            "type": "spacing",
            "description": "Controls the horizontal spacing between the Control and the Label",
            "oldPath": "Forms.Radio.LG.ContentRow.ItemSpacing"
          }
        },
        "PaddingTopBottom": {
          "SM": {
            "value": "{core.dimensionREM.8}",
            "type": "spacing",
            "description": "Figma Only! Do not apply on codes comps. Use <Padding> instead",
            "oldPath": "None"
          },
          "MD": {
            "value": "{core.dimensionREM.8}",
            "type": "spacing",
            "description": "Figma Only! Do not apply on codes comps. Use <Padding> instead",
            "oldPath": "None"
          },
          "LG": {
            "value": "{core.dimensionREM.8}",
            "type": "spacing",
            "description": "Figma Only! Do not apply on codes comps. Use <Padding> instead",
            "oldPath": "None"
          }
        },
        "Padding": {
          "SM": {
            "value": "{Forms.Radio.ContentRow.PaddingTopBottom.SM} 0 ",
            "type": "spacing",
            "description": "Coded comps only!",
            "oldPath": "Forms.Radio.SM.ContentRow.Padding"
          },
          "MD": {
            "value": "{Forms.Radio.ContentRow.PaddingTopBottom.MD} 0 ",
            "type": "spacing",
            "description": "Coded comps only!",
            "oldPath": "Forms.Radio.MD.ContentRow.Padding"
          },
          "LG": {
            "value": "{Forms.Radio.ContentRow.PaddingTopBottom.LG} 0 ",
            "type": "spacing",
            "description": "Coded comps only!",
            "oldPath": "Forms.Radio.LG.ContentRow.Padding"
          }
        }
      },
      "ControlWrapper": {
        "PaddingTop": {
          "SM": {
            "value": "0",
            "type": "spacing",
            "description": "Can be used to align the control against the text",
            "oldPath": "Forms.Radio.SM.ControlWrapper.TopMargin"
          },
          "MD": {
            "value": "{core.dimensionREM.4}",
            "type": "spacing",
            "description": "Can be used to align the control against the text",
            "oldPath": "Forms.Radio.MD.ControlWrapper.TopMargin"
          },
          "LG": {
            "value": "{core.dimensionREM.4}",
            "type": "spacing",
            "description": "Can be used to align the control against the text",
            "oldPath": "Forms.Radio.LG.ControlWrapper.TopMargin"
          }
        }
      },
      "Control": {
        "Container": {
          "BackgroundColor": {
            "Active": {
              "Rest": {
                "value": "{q.surface.brand.primary.rest}",
                "type": "color",
                "description": "Also applies to indeterminate",
                "oldPath": "Forms.Radio.Control.Background.Selected.Fill.[state]"
              },
              "Hover": {
                "value": "{q.surface.brand.primary.hover}",
                "type": "color",
                "description": "Also applies to indeterminate",
                "oldPath": "Forms.Radio.Control.Background.Selected.Fill.[state]"
              },
              "Pressed": {
                "value": "{q.surface.brand.primary.pressed}",
                "type": "color",
                "description": "Also applies to indeterminate",
                "oldPath": "Forms.Radio.Control.Background.Selected.Fill.[state]"
              },
              "Focus": {
                "value": "{q.surface.brand.primary.rest}",
                "type": "color",
                "description": "Also applies to indeterminate",
                "oldPath": "Forms.Radio.Control.Background.Selected.Fill.[state]"
              },
              "Disabled": {
                "value": "{q.surface.disabled.alpha}",
                "type": "color",
                "description": "Also applies to indeterminate",
                "oldPath": "Forms.Radio.Control.Background.Selected.Fill.[state]"
              },
              "ReadOnly": {
                "value": "{q.surface.disabled.alpha}",
                "type": "color",
                "description": "Also applies to indeterminate",
                "oldPath": "Forms.Radio.Control.Background.Selected.Fill.[state]"
              }
            },
            "Inactive": {
              "Rest": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "description": "",
                "oldPath": "Forms.Radio.Control.Background.Unselected.Fill.[state]"
              },
              "Hover": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "description": "",
                "oldPath": "Forms.Radio.Control.Background.Unselected.Fill.[state]"
              },
              "Pressed": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "description": "",
                "oldPath": "Forms.Radio.Control.Background.Unselected.Fill.[state]"
              },
              "Focus": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "description": "",
                "oldPath": "Forms.Radio.Control.Background.Unselected.Fill.[state]"
              },
              "Disabled": {
                "value": "{q.content.ondisabled.inverted}",
                "type": "color",
                "description": "",
                "oldPath": "Forms.Radio.Control.Background.Unselected.Fill.[state]"
              },
              "ReadOnly": {
                "value": "{q.content.ondisabled.inverted}",
                "type": "color",
                "description": "",
                "oldPath": "Forms.Radio.Control.Background.Unselected.Fill.[state]"
              },
              "Error": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "description": "",
                "oldPath": "Forms.Radio.Control.Background.Unselected.Fill.[state]"
              }
            }
          },
          "BorderColor": {
            "Active": {
              "Rest": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.Radio.Control.Background.Selected.Stroke.Rest"
              },
              "Hover": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.Radio.Control.Background.Selected.Stroke.Hover"
              },
              "Pressed": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.Radio.Control.Background.Selected.Stroke.Pressed"
              },
              "Focus": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.Radio.Control.Background.Selected.Stroke.Focus"
              },
              "Disabled": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.Radio.Control.Background.Selected.Stroke.Disabled"
              },
              "ReadOnly": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.Radio.Control.Background.Selected.Stroke.ReadOnly"
              }
            },
            "Inactive": {
              "Rest": {
                "value": "{q.stroke.brand.beta.rest}",
                "type": "color",
                "oldPath": "Forms.Radio.Control.Background.Unselected.Stroke.Rest"
              },
              "Hover": {
                "value": "{q.stroke.brand.beta.hover}",
                "type": "color",
                "oldPath": "Forms.Radio.Control.Background.Unselected.Stroke.Hover"
              },
              "Pressed": {
                "value": "{q.stroke.brand.beta.pressed}",
                "type": "color",
                "oldPath": "Forms.Radio.Control.Background.Unselected.Stroke.Pressed"
              },
              "Focus": {
                "value": "{q.stroke.brand.beta.rest}",
                "type": "color",
                "oldPath": "Forms.Radio.Control.Background.Unselected.Stroke.Focus"
              },
              "Disabled": {
                "value": "{q.stroke.disabled.beta}",
                "type": "color",
                "oldPath": "Forms.Radio.Control.Background.Unselected.Stroke.Disabled"
              },
              "ReadOnly": {
                "value": "{q.stroke.readonly}",
                "type": "color",
                "oldPath": "Forms.Radio.Control.Background.Unselected.Stroke.ReadOnly"
              },
              "Error": {
                "value": "{q.stroke.error}",
                "type": "color",
                "oldPath": "Forms.Radio.Control.Background.Unselected.Stroke.Error"
              }
            }
          },
          "BorderWidth": {
            "SM": {
              "Active": {
                "Rest": {
                  "value": "{core.dimensionPX.0}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.SM.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.SM.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.SM.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.SM.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.SM.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Error": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.SM.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                }
              },
              "Inactive": {
                "Rest": {
                  "value": "{core.dimensionPX.0}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.SM.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.SM.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.SM.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.SM.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.SM.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Error": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.SM.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                }
              }
            },
            "MD": {
              "Active": {
                "Rest": {
                  "value": "{core.dimensionPX.0}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.MD.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.MD.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.MD.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.MD.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.MD.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Error": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.MD.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                }
              },
              "Inactive": {
                "Rest": {
                  "value": "{core.dimensionPX.0}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.MD.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.MD.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.MD.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.MD.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.MD.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Error": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.MD.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                }
              }
            },
            "LG": {
              "Active": {
                "Rest": {
                  "value": "{core.dimensionPX.0}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.LG.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.LG.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.LG.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.LG.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.LG.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Error": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.LG.Active.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                }
              },
              "Inactive": {
                "Rest": {
                  "value": "{core.dimensionPX.0}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.LG.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.LG.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.LG.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.LG.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.LG.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                },
                "Error": {
                  "value": "{Forms.Radio.Control.Container.BorderWidth.LG.Inactive.Rest}",
                  "type": "borderWidth",
                  "description": "Figma Only! Do not apply on codes comps",
                  "oldPath": "None"
                }
              }
            }
          },
          "Border": {
            "SM": {
              "Active": {
                "Rest": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Active.Rest}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.SM.Active.Rest}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Active.Hover}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.SM.Active.Hover}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Active.Pressed}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.SM.Active.Pressed}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Active.Focus}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.SM.Active.Focus}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Active.Disabled}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.SM.Active.Disabled}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Active.ReadOnly}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.SM.Active.ReadOnly}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Error": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Active.Error}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.SM.Active.Error}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                }
              },
              "Inactive": {
                "Rest": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Inactive.Rest}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.SM.Inactive.Rest}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Inactive.Hover}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.SM.Inactive.Hover}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Inactive.Pressed}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.SM.Inactive.Pressed}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Inactive.Focus}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.SM.Inactive.Focus}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Inactive.Disabled}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.SM.Inactive.Disabled}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Inactive.ReadOnly}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.SM.Inactive.ReadOnly}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Error": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Inactive.Error}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.SM.Inactive.Error}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                }
              }
            },
            "MD": {
              "Active": {
                "Rest": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Active.Rest}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.MD.Active.Rest}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Active.Hover}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.MD.Active.Hover}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Active.Pressed}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.MD.Active.Pressed}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Active.Focus}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.MD.Active.Focus}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Active.Disabled}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.MD.Active.Disabled}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Active.ReadOnly}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.MD.Active.ReadOnly}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Error": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Active.Error}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.MD.Active.Error}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                }
              },
              "Inactive": {
                "Rest": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Inactive.Rest}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.MD.Inactive.Rest}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Inactive.Hover}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.MD.Inactive.Hover}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Inactive.Pressed}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.MD.Inactive.Pressed}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Inactive.Focus}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.MD.Inactive.Focus}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Inactive.Disabled}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.MD.Inactive.Disabled}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Inactive.ReadOnly}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.MD.Inactive.ReadOnly}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Error": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Inactive.Error}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.MD.Inactive.Error}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                }
              }
            },
            "LG": {
              "Active": {
                "Rest": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Active.Rest}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.LG.Active.Rest}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Active.Hover}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.LG.Active.Hover}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Active.Pressed}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.LG.Active.Pressed}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Active.Focus}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.LG.Active.Focus}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Active.Disabled}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.LG.Active.Disabled}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Active.ReadOnly}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.LG.Active.ReadOnly}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Error": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Active.Error}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.LG.Active.Error}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                }
              },
              "Inactive": {
                "Rest": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Inactive.Rest}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.LG.Inactive.Rest}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Inactive.Hover}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.LG.Inactive.Hover}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Inactive.Pressed}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.LG.Inactive.Pressed}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Inactive.Focus}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.LG.Inactive.Focus}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Inactive.Disabled}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.LG.Inactive.Disabled}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Inactive.ReadOnly}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.LG.Inactive.ReadOnly}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                },
                "Error": {
                  "value": {
                    "color": "{Forms.Radio.Control.Container.BorderColor.Inactive.Error}",
                    "width": "{Forms.Radio.Control.Container.BorderWidth.LG.Inactive.Error}",
                    "style": "solid"
                  },
                  "type": "border",
                  "oldPath": "None"
                }
              }
            }
          },
          "BorderRadius": {
            "value": "{core.borderRadius.Round}",
            "type": "borderRadius",
            "description": "Applies to any size and state",
            "oldPath": "Forms.Radio.ControlBorderRadius"
          },
          "Size": {
            "SM": {
              "value": "{core.dimensionPX.16}",
              "type": "sizing",
              "oldPath": "Forms.Radio.Control.Background.[Unselected/Selected/].[state]. Please note: This token consolidates a lot of tokens, as states won't play a role for the Container Size. But it is new, that the compent scale is now part of this token (still needs to be utilized in Figma)."
            },
            "MD": {
              "value": "{core.dimensionPX.16}",
              "type": "sizing",
              "oldPath": "Forms.Radio.Control.Background.[Unselected/Selected/].[state]. Please note: This token consolidates a lot of tokens, as states won't play a role for the Container Size. But it is new, that the compent scale is now part of this token (still needs to be utilized in Figma)."
            },
            "LG": {
              "value": "{core.dimensionPX.20}",
              "type": "sizing",
              "oldPath": "Forms.Radio.Control.Background.[Unselected/Selected/].[state]. Please note: This token consolidates a lot of tokens, as states won't play a role for the Container Size. But it is new, that the compent scale is now part of this token (still needs to be utilized in Figma)."
            }
          }
        },
        "Icon": {
          "IconColor": {
            "Active": {
              "Rest": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "oldPath": "Forms.Radio.Control.Foreground.Selected.Fill.Rest"
              },
              "Hover": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "oldPath": "Forms.Radio.Control.Foreground.Selected.Fill.Hover"
              },
              "Pressed": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "oldPath": "Forms.Radio.Control.Foreground.Selected.Fill.Pressed"
              },
              "Focus": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "oldPath": "Forms.Radio.Control.Foreground.Selected.Fill.Focus"
              },
              "Disabled": {
                "value": "{q.content.ondisabled.inverted}",
                "type": "color",
                "oldPath": "Forms.Radio.Control.Foreground.Selected.Fill.Disabled"
              },
              "ReadOnly": {
                "value": "{q.content.ondisabled.inverted}",
                "type": "color",
                "oldPath": "Forms.Radio.Control.Foreground.Selected.Fill.ReadOnly"
              }
            },
            "Inactive": {
              "Rest": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "oldPath": "Forms.Radio.Control.Foreground.Unselected.Fill.Rest"
              },
              "Hover": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "oldPath": "Forms.Radio.Control.Foreground.Unselected.Fill.Hover"
              },
              "Pressed": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "oldPath": "Forms.Radio.Control.Foreground.Unselected.Fill.Pressed"
              },
              "Focus": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "oldPath": "Forms.Radio.Control.Foreground.Unselected.Fill.Focus"
              },
              "Disabled": {
                "value": "{q.content.ondisabled.inverted}",
                "type": "color",
                "oldPath": "Forms.Radio.Control.Foreground.Unselected.Fill.Disabled"
              },
              "ReadOnly": {
                "value": "{q.content.ondisabled.inverted}",
                "type": "color",
                "oldPath": "Forms.Radio.Control.Foreground.Unselected.Fill.ReadOnly"
              },
              "Error": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "oldPath": "Forms.Radio.Control.Foreground.Unselected.Fill.Error"
              }
            }
          },
          "IconSize": {
            "SM": {
              "Active": {
                "Rest": {
                  "value": "{core.dimensionPX.6}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Selected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Hover": {
                  "value": "{core.dimensionPX.8}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Selected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Pressed": {
                  "value": "{core.dimensionPX.10}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Selected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Focus": {
                  "value": "{core.dimensionPX.6}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Selected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Disabled": {
                  "value": "{core.dimensionPX.6}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Selected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "ReadOnly": {
                  "value": "{core.dimensionPX.6}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Selected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                }
              },
              "Inactive": {
                "Rest": {
                  "value": "{core.dimensionPX.14}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Unselected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Hover": {
                  "value": "{core.dimensionPX.14}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Unselected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Pressed": {
                  "value": "{core.dimensionPX.14}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Unselected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Focus": {
                  "value": "{core.dimensionPX.14}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Unselected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Disabled": {
                  "value": "{core.dimensionPX.14}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Unselected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "ReadOnly": {
                  "value": "{core.dimensionPX.14}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Unselected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Error": {
                  "value": "{core.dimensionPX.14}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Unselected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                }
              }
            },
            "MD": {
              "Active": {
                "Rest": {
                  "value": "{core.dimensionPX.6}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Selected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Hover": {
                  "value": "{core.dimensionPX.8}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Selected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Pressed": {
                  "value": "{core.dimensionPX.10}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Selected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Focus": {
                  "value": "{core.dimensionPX.6}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Selected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Disabled": {
                  "value": "{core.dimensionPX.6}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Selected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "ReadOnly": {
                  "value": "{core.dimensionPX.6}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Selected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                }
              },
              "Inactive": {
                "Rest": {
                  "value": "{core.dimensionPX.14}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Unselected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Hover": {
                  "value": "{core.dimensionPX.14}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Unselected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Pressed": {
                  "value": "{core.dimensionPX.14}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Unselected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Focus": {
                  "value": "{core.dimensionPX.14}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Unselected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Disabled": {
                  "value": "{core.dimensionPX.14}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Unselected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "ReadOnly": {
                  "value": "{core.dimensionPX.14}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Unselected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Error": {
                  "value": "{core.dimensionPX.14}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Unselected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                }
              }
            },
            "LG": {
              "Active": {
                "Rest": {
                  "value": "{core.dimensionPX.6}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Selected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Hover": {
                  "value": "{core.dimensionPX.8}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Selected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Pressed": {
                  "value": "{core.dimensionPX.10}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Selected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Focus": {
                  "value": "{core.dimensionPX.6}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Selected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Disabled": {
                  "value": "{core.dimensionPX.6}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Selected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "ReadOnly": {
                  "value": "{core.dimensionPX.6}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Selected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                }
              },
              "Inactive": {
                "Rest": {
                  "value": "{core.dimensionPX.14}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Unselected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Hover": {
                  "value": "{core.dimensionPX.14}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Unselected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Pressed": {
                  "value": "{core.dimensionPX.14}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Unselected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Focus": {
                  "value": "{core.dimensionPX.14}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Unselected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Disabled": {
                  "value": "{core.dimensionPX.14}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Unselected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "ReadOnly": {
                  "value": "{core.dimensionPX.14}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Unselected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                },
                "Error": {
                  "value": "{core.dimensionPX.14}",
                  "type": "sizing",
                  "oldPath": "Forms.Radio.Control.Foreground.Unselected.[state]. Added [scale] to the tokenpath, still needs to be appllied in Figma"
                }
              }
            }
          }
        }
      }
    },
    "RadioGroup": {
      "RadioStackVertical": {
        "ItemSpacing": {
          "SM": {
            "value": "{core.dimensionREM.8}",
            "type": "spacing",
            "description": "Defines the gap between each Radio Option inside <RadioStack>",
            "oldPath": "Forms.RadioGroup.SM.RadioStack.Vertical.ItemSpacing"
          },
          "MD": {
            "value": "{core.dimensionREM.8}",
            "type": "spacing",
            "description": "Defines the gap between each Radio Option inside <RadioStack>",
            "oldPath": "Forms.RadioGroup.MD.RadioStack.Vertical.ItemSpacing"
          },
          "LG": {
            "value": "{core.dimensionREM.8}",
            "type": "spacing",
            "description": "Defines the gap between each Radio Option inside <RadioStack>",
            "oldPath": "Forms.RadioGroup.LG.RadioStack.Vertical.ItemSpacing"
          }
        }
      },
      "RadioStackHorizontal": {
        "ItemSpacing": {
          "SM": {
            "value": "{core.dimensionREM.16}",
            "type": "spacing",
            "description": "Defines the gap between each Radio Option inside <RadioStack>",
            "oldPath": "Forms.RadioGroup.SM.RadioStack.Horizontal.ItemSpacing"
          },
          "MD": {
            "value": "{core.dimensionREM.16}",
            "type": "spacing",
            "description": "Defines the gap between each Radio Option inside <RadioStack>",
            "oldPath": "Forms.RadioGroup.MD.RadioStack.Horizontal.ItemSpacing"
          },
          "LG": {
            "value": "{core.dimensionREM.16}",
            "type": "spacing",
            "description": "Defines the gap between each Radio Option inside <RadioStack>",
            "oldPath": "Forms.RadioGroup.LG.RadioStack.Horizontal.ItemSpacing"
          }
        }
      },
      "LegendContainer": {
        "PaddingBottom": {
          "SM": {
            "value": "{core.dimensionREM.16}",
            "type": "spacing",
            "oldPath": "Forms.RadioGroup.SM.LegendContainer.PaddingBottom"
          },
          "MD": {
            "value": "{core.dimensionREM.16}",
            "type": "spacing",
            "oldPath": "Forms.RadioGroup.MD.LegendContainer.PaddingBottom"
          },
          "LG": {
            "value": "{core.dimensionREM.16}",
            "type": "spacing",
            "oldPath": "Forms.RadioGroup.LG.LegendContainer.PaddingBottom"
          }
        }
      },
      "CaptionContainer": {
        "ItemSpacing": {
          "SM": {
            "value": "{core.dimensionREM.4}",
            "type": "spacing",
            "oldPath": "Forms.RadioGroup.SM.CaptionContainer.ItemSpacing"
          },
          "MD": {
            "value": "{core.dimensionREM.4}",
            "type": "spacing",
            "oldPath": "Forms.RadioGroup.MD.CaptionContainer.ItemSpacing"
          },
          "LG": {
            "value": "{core.dimensionREM.4}",
            "type": "spacing",
            "oldPath": "Forms.RadioGroup.LG.CaptionContainer.ItemSpacing"
          }
        },
        "PaddingTop": {
          "SM": {
            "value": "{core.dimensionREM.16}",
            "type": "spacing",
            "description": "Figma Only! Do not apply on codes comps. Use <Padding> instead",
            "oldPath": "Forms.RadioGroup.SM.CaptionContainer.PaddingTop"
          },
          "MD": {
            "value": "{core.dimensionREM.16}",
            "type": "spacing",
            "description": "Figma Only! Do not apply on codes comps. Use <Padding> instead",
            "oldPath": "Forms.RadioGroup.MD.CaptionContainer.PaddingTop"
          },
          "LG": {
            "value": "{core.dimensionREM.16}",
            "type": "spacing",
            "description": "Figma Only! Do not apply on codes comps. Use <Padding> instead",
            "oldPath": "Forms.RadioGroup.LG.CaptionContainer.PaddingTop"
          }
        },
        "Padding": {
          "SM": {
            "value": "{Forms.RadioGroup.CaptionContainer.PaddingTop.SM} 0 0 0",
            "type": "spacing",
            "description": "Coded comps only!",
            "oldPath": "Forms.RadioGroup.SM.CaptionContainer.PaddingTop"
          },
          "MD": {
            "value": "{Forms.RadioGroup.CaptionContainer.PaddingTop.MD} 0 0 0",
            "type": "spacing",
            "description": "Coded comps only!",
            "oldPath": "Forms.RadioGroup.MD.CaptionContainer.PaddingTop"
          },
          "LG": {
            "value": "{Forms.RadioGroup.CaptionContainer.PaddingTop.LG} 0 0 0",
            "type": "spacing",
            "description": "Coded comps only!",
            "oldPath": "Forms.RadioGroup.LG.CaptionContainer.PaddingTop"
          }
        }
      }
    },
    "Slider": {
      "Thumb": {
        "BackgroundColor": {
          "Rest": {
            "value": "{q.surface.default}",
            "type": "color",
            "oldPath": "Forms.Slider.Thumb.Fill.Rest"
          },
          "Hover": {
            "value": "{q.surface.default}",
            "type": "color",
            "oldPath": "Forms.Slider.Thumb.Fill.Hover"
          },
          "Pressed": {
            "value": "{q.surface.default}",
            "type": "color",
            "oldPath": "Forms.Slider.Thumb.Fill.Pressed"
          },
          "Focus": {
            "value": "{q.surface.default}",
            "type": "color",
            "oldPath": "Forms.Slider.Thumb.Fill.Focus"
          },
          "Disabled": {
            "value": "{q.surface.default}",
            "type": "color",
            "oldPath": "Forms.Slider.Thumb.Fill.Disabled"
          },
          "ReadOnly": {
            "value": "{q.surface.default}",
            "type": "color",
            "oldPath": "Forms.Slider.Thumb.Fill.ReadOnly"
          },
          "Error": {
            "value": "{q.surface.error}",
            "type": "color",
            "oldPath": "Forms.Slider.Thumb.Fill.Error"
          }
        },
        "BorderColor": {
          "Rest": {
            "value": "{q.stroke.brand.beta.rest}",
            "type": "color",
            "description": "Figma Only! Do not apply on codes comps. Use <Border> instead.",
            "oldPath": "Forms.Slider.Thumb.Stroke.Rest"
          },
          "Hover": {
            "value": "{q.stroke.brand.beta.hover}",
            "type": "color",
            "description": "Figma Only! Do not apply on codes comps. Use <Border> instead.",
            "oldPath": "Forms.Slider.Thumb.Stroke.Hover"
          },
          "Pressed": {
            "value": "{q.stroke.brand.beta.pressed}",
            "type": "color",
            "description": "Figma Only! Do not apply on codes comps. Use <Border> instead.",
            "oldPath": "Forms.Slider.Thumb.Stroke.Pressed"
          },
          "Focus": {
            "value": "{q.stroke.brand.beta.rest}",
            "type": "color",
            "description": "Figma Only! Do not apply on codes comps. Use <Border> instead.",
            "oldPath": "Forms.Slider.Thumb.Stroke.Focus"
          },
          "Disabled": {
            "value": "{q.stroke.disabled.beta}",
            "type": "color",
            "description": "Figma Only! Do not apply on codes comps. Use <Border> instead.",
            "oldPath": "Forms.Slider.Thumb.Stroke.Disabled"
          },
          "ReadOnly": {
            "value": "{q.stroke.readonly}",
            "type": "color",
            "description": "Figma Only! Do not apply on codes comps. Use <Border> instead.",
            "oldPath": "Forms.Slider.Thumb.Stroke.ReadOnly"
          },
          "Error": {
            "value": "{q.stroke.error}",
            "type": "color",
            "description": "Figma Only! Do not apply on codes comps. Use <Border> instead.",
            "oldPath": "Forms.Slider.Thumb.Stroke.Error"
          }
        },
        "BorderWidth": {
          "Rest": {
            "value": "core.dimensionPX.2",
            "type": "borderWidth",
            "description": "Figma Only! Do not apply on codes comps. Use <Border> instead.",
            "oldPath": "None"
          },
          "Hover": {
            "value": "core.dimensionPX.4",
            "type": "borderWidth",
            "description": "Figma Only! Do not apply on codes comps. Use <Border> instead.",
            "oldPath": "None"
          },
          "Pressed": {
            "value": "Forms.Slider.Thumb.BorderWidth.Hover",
            "type": "borderWidth",
            "description": "Figma Only! Do not apply on codes comps. Use <Border> instead.",
            "oldPath": "None"
          },
          "Focus": {
            "value": "Forms.Slider.Thumb.BorderWidth.Rest",
            "type": "borderWidth",
            "description": "Figma Only! Do not apply on codes comps. Use <Border> instead.",
            "oldPath": "None"
          },
          "Disabled": {
            "value": "Forms.Slider.Thumb.BorderWidth.Rest",
            "type": "borderWidth",
            "description": "Figma Only! Do not apply on codes comps. Use <Border> instead.",
            "oldPath": "None"
          },
          "ReadOnly": {
            "value": "Forms.Slider.Thumb.BorderWidth.Rest",
            "type": "borderWidth",
            "description": "Figma Only! Do not apply on codes comps. Use <Border> instead.",
            "oldPath": "None"
          },
          "Error": {
            "value": "Forms.Slider.Thumb.BorderWidth.Rest",
            "type": "borderWidth",
            "description": "Figma Only! Do not apply on codes comps. Use <Border> instead.",
            "oldPath": "None"
          }
        },
        "Border": {
          "Rest": {
            "value": {
              "color": "{Forms.Slider.Thumb.BorderColor.Rest}",
              "width": "{Forms.Slider.Thumb.BorderWidth.Rest}",
              "style": "solid"
            },
            "type": "border",
            "description": "Coded comps only! Use BorderWidth and BorderColor instead",
            "oldPath": "Forms.Slider.Thumb.Border.[state]"
          },
          "Hover": {
            "value": {
              "color": "{Forms.Slider.Thumb.BorderColor.Hover}",
              "width": "{Forms.Slider.Thumb.BorderWidth.Hover}",
              "style": "solid"
            },
            "type": "border",
            "description": "Coded comps only! Use BorderWidth and BorderColor instead",
            "oldPath": "Forms.Slider.Thumb.Border.[state]"
          },
          "Pressed": {
            "value": {
              "color": "{Forms.Slider.Thumb.BorderColor.Pressed}",
              "width": "{Forms.Slider.Thumb.BorderWidth.Pressed}",
              "style": "solid"
            },
            "type": "border",
            "description": "Coded comps only! Use BorderWidth and BorderColor instead",
            "oldPath": "Forms.Slider.Thumb.Border.[state]"
          },
          "Focus": {
            "value": {
              "color": "{Forms.Slider.Thumb.BorderColor.Focus}",
              "width": "{Forms.Slider.Thumb.BorderWidth.Focus}",
              "style": "solid"
            },
            "type": "border",
            "description": "Coded comps only! Use BorderWidth and BorderColor instead",
            "oldPath": "Forms.Slider.Thumb.Border.[state]"
          },
          "Disabled": {
            "value": {
              "color": "{Forms.Slider.Thumb.BorderColor.Disabled}",
              "width": "{Forms.Slider.Thumb.BorderWidth.Disabled}",
              "style": "solid"
            },
            "type": "border",
            "description": "Coded comps only! Use BorderWidth and BorderColor instead",
            "oldPath": "Forms.Slider.Thumb.Border.[state]"
          },
          "ReadOnly": {
            "value": {
              "color": "{Forms.Slider.Thumb.BorderColor.ReadOnly}",
              "width": "{Forms.Slider.Thumb.BorderWidth.ReadOnly}",
              "style": "solid"
            },
            "type": "border",
            "description": "Coded comps only! Use BorderWidth and BorderColor instead",
            "oldPath": "Forms.Slider.Thumb.Border.[state]"
          },
          "Error": {
            "value": {
              "color": "{Forms.Slider.Thumb.BorderColor.Error}",
              "width": "{Forms.Slider.Thumb.BorderWidth.Error}",
              "style": "solid"
            },
            "type": "border",
            "description": "Coded comps only! Use BorderWidth and BorderColor instead",
            "oldPath": "Forms.Slider.Thumb.Border.[state]"
          }
        },
        "Size": {
          "Rest": {
            "value": "{core.dimensionPX.14}",
            "type": "sizing",
            "oldPath": "Forms.Slider.Thumb.Sizing.[state]"
          },
          "Hover": {
            "value": "{core.dimensionPX.20}",
            "type": "sizing",
            "oldPath": "Forms.Slider.Thumb.Sizing.[state]"
          },
          "Pressed": {
            "value": "{Forms.Slider.Thumb.Size.Hover}",
            "type": "sizing",
            "oldPath": "Forms.Slider.Thumb.Sizing.[state]"
          },
          "Focus": {
            "value": "{Forms.Slider.Thumb.Size.Rest}",
            "type": "sizing",
            "oldPath": "Forms.Slider.Thumb.Sizing.[state]"
          },
          "Disabled": {
            "value": "Forms.Slider.Thumb.Size.Rest}",
            "type": "sizing",
            "oldPath": "Forms.Slider.Thumb.Sizing.[state]"
          },
          "ReadOnly": {
            "value": "{Forms.Slider.Thumb.Size.Rest}",
            "type": "sizing",
            "oldPath": "Forms.Slider.Thumb.Sizing.[state]"
          }
        }
      },
      "Track": {
        "BorderColor": {
          "Default": {
            "Active": {
              "value": "{q.content.onbrand.beta.rest}",
              "type": "color",
              "oldPath": "Forms.Slider.Track.Stroke.Active.Default"
            },
            "Inactive": {
              "value": "{q.surface.brand.secondary.rest}",
              "type": "color",
              "oldPath": "Forms.Slider.Track.Stroke.Inactive.Default"
            }
          },
          "Mute": {
            "Active": {
              "value": "{q.content.ondisabled.alpha}",
              "type": "color",
              "oldPath": "Forms.Slider.Track.Stroke.Active.Mute"
            },
            "Inactive": {
              "value": "{q.surface.disabled.alpha}",
              "type": "color",
              "oldPath": "Forms.Slider.Track.Stroke.Inactive.Mute"
            }
          }
        },
        "BorderWidth": {
          "Default": {
            "Active": {
              "value": "{core.dimensionPX.4}",
              "type": "borderWidth",
              "oldPath": "None"
            },
            "Inactive": {
              "value": "{core.dimensionPX.4}",
              "type": "borderWidth",
              "oldPath": "None"
            }
          },
          "Mute": {
            "Active": {
              "value": "{core.dimensionPX.4}",
              "type": "borderWidth",
              "oldPath": "None"
            },
            "Inactive": {
              "value": "{core.dimensionPX.4}",
              "type": "borderWidth",
              "oldPath": "None"
            }
          }
        },
        "Border": {
          "Default": {
            "Active": {
              "value": {
                "color": "{Forms.Slider.Track.BorderColor.Default.Active.}",
                "width": "{Forms.Slider.Track.BorderWidth.Default.Active.}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Forms.Slider.Track.Border.Active.Default"
            },
            "Inactive": {
              "value": {
                "color": "{Forms.Slider.Track.BorderColor.Default.Inactive.}",
                "width": "{Forms.Slider.Track.BorderWidth.Default.Inactive.}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Forms.Slider.Track.Border.Inactive.Default"
            }
          },
          "Mute": {
            "Active": {
              "value": {
                "color": "{Forms.Slider.Track.BorderColor.Mute.Active.}",
                "width": "{Forms.Slider.Track.BorderWidth.Mute.Active.}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Forms.Slider.Track.Border.Active.Mute"
            },
            "Inactive": {
              "value": {
                "color": "{Forms.Slider.Track.BorderColor.Mute.Inactive.}",
                "width": "{Forms.Slider.Track.BorderWidth.Mute.Inactive.}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Forms.Slider.Track.Border.Inactive.Mute"
            }
          }
        }
      },
      "TickMark": {
        "BackgroundColor": {
          "Default": {
            "Active": {
              "value": "{q.surface.default}",
              "type": "color"
            },
            "Inactive": {
              "value": "{Forms.Slider.TickMark.BackgroundColor.Default.Active}",
              "type": "color"
            }
          },
          "Mute": {
            "Active": {
              "value": "{Forms.Slider.TickMark.BackgroundColor.Default.Active}",
              "type": "color"
            },
            "Inactive": {
              "value": "{Forms.Slider.TickMark.BackgroundColor.Default.Active}",
              "type": "color"
            }
          }
        },
        "BorderColor": {
          "Default": {
            "Active": {
              "value": "{q.content.onbrand.beta.rest}",
              "type": "color",
              "oldPath": "Forms.Slider.TickMark.Stroke.Active.Default"
            },
            "Inactive": {
              "value": "{q.surface.brand.secondary.rest}",
              "type": "color",
              "oldPath": "Forms.Slider.TickMark.Stroke.Inactive.Default"
            }
          },
          "Mute": {
            "Active": {
              "value": "{q.content.ondisabled.alpha}",
              "type": "color",
              "oldPath": "Forms.Slider.TickMark.Stroke.Active.Mute"
            },
            "Inactive": {
              "value": "{q.surface.disabled.alpha}",
              "type": "color",
              "oldPath": "Forms.Slider.TickMark.Stroke.Inactive.Mute"
            }
          }
        },
        "BorderWidth": {
          "Default": {
            "Active": {
              "value": "{core.dimensionPX.1}",
              "type": "borderWidth",
              "oldPath": "None"
            },
            "Inactive": {
              "value": "{Forms.Slider.TickMark.BorderWidth.Default.Active}",
              "type": "borderWidth",
              "oldPath": "None"
            }
          },
          "Mute": {
            "Active": {
              "value": "{Forms.Slider.TickMark.BorderWidth.Default.Active}",
              "type": "borderWidth",
              "oldPath": "None"
            },
            "Inactive": {
              "value": "{Forms.Slider.TickMark.BorderWidth.Default.Active}",
              "type": "borderWidth",
              "oldPath": "None"
            }
          }
        },
        "Border": {
          "Default": {
            "Active": {
              "value": {
                "color": "{Forms.Slider.TickMark.BorderColor.Default.Active}",
                "width": "{Forms.Slider.TickMark.BorderWidth.Default.Active}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Forms.Slider.TickMark.Border.Active.Default"
            },
            "Inactive": {
              "value": {
                "color": "{Forms.Slider.TickMark.BorderColor.Default.Inactive}",
                "width": "{Forms.Slider.TickMark.BorderWidth.Default.Inactive}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Forms.Slider.TickMark.Border.Inactive.Default"
            }
          },
          "Mute": {
            "Active": {
              "value": {
                "color": "{Forms.Slider.TickMark.BorderColor.Mute.Active}",
                "width": "{Forms.Slider.TickMark.BorderWidth.Mute.Active}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Forms.Slider.TickMark.Border.Active.Mute"
            },
            "Inactive": {
              "value": {
                "color": "{Forms.Slider.TickMark.BorderColor.Mute.Inactive}",
                "width": "{Forms.Slider.TickMark.BorderWidth.Mute.Inactive}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Forms.Slider.TickMark.Border.Inactive.Mute"
            }
          }
        },
        "Size": {
          "Default": {
            "Active": {
              "value": "{core.dimensionPX.6}",
              "type": "sizing",
              "oldPath": "Forms.Slider.TickMark.Sizing"
            },
            "Inactive": {
              "value": "{Forms.Slider.TickMark.Size.Default.Active}",
              "type": "sizing",
              "oldPath": "None"
            }
          },
          "Mute": {
            "Active": {
              "value": "{Forms.Slider.TickMark.Size.Default.Active}",
              "type": "sizing",
              "oldPath": "None"
            },
            "Inactive": {
              "value": "{Forms.Slider.TickMark.Size.Default.Active}",
              "type": "sizing",
              "oldPath": "None"
            }
          }
        }
      },
      "Legend": {
        "TextColor": {
          "Default": {
            "value": "{q.content.ondefault.beta}",
            "type": "color",
            "oldPath": "Forms.Slider.Legend.Color.Default"
          },
          "Disabled": {
            "value": "{q.content.ondisabled.alpha}",
            "type": "color",
            "oldPath": "Forms.Slider.Legend.Color.Disabled"
          }
        },
        "Typography": {
          "value": "{core.typography.sourceSansPro.regular.75}",
          "type": "typography",
          "oldPath": "Forms.Slider.Legend.Typography"
        }
      }
    },
    "ToggleSwitch": {
      "Control": {
        "Container": {
          "BackgroundColor": {
            "Active": {
              "Rest": {
                "value": "{q.surface.brand.encourage.rest}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Background.Selected.Fill.Rest"
              },
              "Hover": {
                "value": "{q.surface.brand.encourage.hover}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Background.Selected.Fill.Hover"
              },
              "Pressed": {
                "value": "{q.surface.brand.encourage.pressed}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Background.Selected.Fill.Pressed"
              },
              "Focus": {
                "value": "{q.surface.brand.encourage.rest}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Background.Selected.Fill.Focus"
              },
              "Disabled": {
                "value": "{q.surface.disabled.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Background.Selected.Fill.Disabled"
              },
              "ReadOnly": {
                "value": "{q.surface.disabled.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Background.Selected.Fill.ReadOnly"
              }
            },
            "Inactive": {
              "Rest": {
                "value": "{q.content.ondefault.gamma.rest}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Background.Unselected.Fill.Rest"
              },
              "Hover": {
                "value": "{q.content.ondefault.gamma.hover}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Background.Unselected.Fill.Hover"
              },
              "Pressed": {
                "value": "{q.content.ondefault.gamma.pressed}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Background.Unselected.Fill.Pressed"
              },
              "Focus": {
                "value": "{q.content.ondefault.gamma.rest}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Background.Unselected.Fill.Focus"
              },
              "Disabled": {
                "value": "{q.surface.disabled.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Background.Unselected.Fill.Disabled"
              },
              "ReadOnly": {
                "value": "{q.surface.disabled.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Background.Unselected.Fill.ReadOnly"
              }
            }
          },
          "BorderColor": {
            "Active": {
              "Rest": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Background.Unselected.Stroke.Rest"
              },
              "Hover": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Background.Unselected.Stroke.Hover"
              },
              "Pressed": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Background.Unselected.Stroke.Pressed"
              },
              "Focus": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Background.Unselected.Stroke.Focus"
              },
              "Disabled": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Background.Unselected.Stroke.Disabled"
              },
              "ReadOnly": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Background.Unselected.Stroke.ReadOnly"
              }
            },
            "Inactive": {
              "Rest": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Background.Unselected.Stroke.Rest"
              },
              "Hover": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Background.Unselected.Stroke.Hover"
              },
              "Pressed": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Background.Unselected.Stroke.Pressed"
              },
              "Focus": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Background.Unselected.Stroke.Focus"
              },
              "Disabled": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Background.Unselected.Stroke.Disabled"
              },
              "ReadOnly": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Background.Unselected.Stroke.ReadOnly"
              }
            }
          },
          "BorderWidht": {
            "SM": {
              "Active": {
                "Rest": {
                  "value": "{core.borderWidth.None}",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.SM.Active.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.SM.Active.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.SM.Active.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.SM.Active.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.SM.Active.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                }
              },
              "Inactive": {
                "Rest": {
                  "value": "{core.borderWidth.None}",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.SM.Inactive.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.SM.Inactive.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.SM.Inactive.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.SM.Inactive.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.SM.Inactive.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                }
              }
            },
            "MD": {
              "Active": {
                "Rest": {
                  "value": "{core.borderWidth.None}",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.MD.Active.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.MD.Active.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.MD.Active.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.MD.Active.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.MD.Active.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                }
              },
              "Inactive": {
                "Rest": {
                  "value": "{core.borderWidth.None}",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.MD.Inactive.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.MD.Inactive.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.MD.Inactive.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.MD.Inactive.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.MD.Inactive.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                }
              }
            },
            "LG": {
              "Active": {
                "Rest": {
                  "value": "{core.borderWidth.None}",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.LG.Active.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.LG.Active.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.LG.Active.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.LG.Active.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.LG.Active.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                }
              },
              "Inactive": {
                "Rest": {
                  "value": "{core.borderWidth.None}",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "Hover": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.LG.Active.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "Pressed": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.LG.Active.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "Focus": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.LG.Active.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "Disabled": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.LG.Active.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                },
                "ReadOnly": {
                  "value": "Forms.ToggleSwitch.Control.Container.BorderWidht.LG.Active.Rest",
                  "type": "borderWidth",
                  "oldPath": "None"
                }
              }
            }
          },
          "Border": {
            "Active": {
              "Rest": {
                "value": {
                  "color": "{Forms.ToggleSwitch.Control.Container.BorderColor.Active.Rest}",
                  "width": "{Forms.ToggleSwitch.Control.Container.BorderWidth.Active.Rest}",
                  "style": "solid"
                },
                "type": "border",
                "oldPath": "None"
              },
              "Hover": {
                "value": {
                  "color": "{Forms.ToggleSwitch.Control.Container.BorderColor.Active.Hover}",
                  "width": "{Forms.ToggleSwitch.Control.Container.BorderWidth.Active.Hover}",
                  "style": "solid"
                },
                "type": "border",
                "oldPath": "None"
              },
              "Pressed": {
                "value": {
                  "color": "{Forms.ToggleSwitch.Control.Container.BorderColor.Active.Pressed}",
                  "width": "{Forms.ToggleSwitch.Control.Container.BorderWidth.Active.Pressed}",
                  "style": "solid"
                },
                "type": "border",
                "oldPath": "None"
              },
              "Focus": {
                "value": {
                  "color": "{Forms.ToggleSwitch.Control.Container.BorderColor.Active.Focus}",
                  "width": "{Forms.ToggleSwitch.Control.Container.BorderWidth.Active.Focus}",
                  "style": "solid"
                },
                "type": "border",
                "oldPath": "None"
              },
              "Disabled": {
                "value": {
                  "color": "{Forms.ToggleSwitch.Control.Container.BorderColor.Active.Disabled}",
                  "width": "{Forms.ToggleSwitch.Control.Container.BorderWidth.Active.Disabled}",
                  "style": "solid"
                },
                "type": "border",
                "oldPath": "None"
              },
              "ReadOnly": {
                "value": {
                  "color": "{Forms.ToggleSwitch.Control.Container.BorderColor.Active.ReadOnly}",
                  "width": "{Forms.ToggleSwitch.Control.Container.BorderWidth.Active.ReadOnly}",
                  "style": "solid"
                },
                "type": "border",
                "oldPath": "None"
              }
            },
            "Inactive": {
              "Rest": {
                "value": {
                  "color": "{Forms.ToggleSwitch.Control.Container.BorderColor.Inactive.Rest}",
                  "width": "{Forms.ToggleSwitch.Control.Container.BorderWidth.Inactive.Rest}",
                  "style": "solid"
                },
                "type": "border",
                "oldPath": "None"
              },
              "Hover": {
                "value": {
                  "color": "{Forms.ToggleSwitch.Control.Container.BorderColor.Inactive.Hover}",
                  "width": "{Forms.ToggleSwitch.Control.Container.BorderWidth.Inactive.Hover}",
                  "style": "solid"
                },
                "type": "border",
                "oldPath": "None"
              },
              "Pressed": {
                "value": {
                  "color": "{Forms.ToggleSwitch.Control.Container.BorderColor.Inactive.Pressed}",
                  "width": "{Forms.ToggleSwitch.Control.Container.BorderWidth.Inactive.Pressed}",
                  "style": "solid"
                },
                "type": "border",
                "oldPath": "None"
              },
              "Focus": {
                "value": {
                  "color": "{Forms.ToggleSwitch.Control.Container.BorderColor.Inactive.Focus}",
                  "width": "{Forms.ToggleSwitch.Control.Container.BorderWidth.Inactive.Focus}",
                  "style": "solid"
                },
                "type": "border",
                "oldPath": "None"
              },
              "Disabled": {
                "value": {
                  "color": "{Forms.ToggleSwitch.Control.Container.BorderColor.Inactive.Disabled}",
                  "width": "{Forms.ToggleSwitch.Control.Container.BorderWidth.Inactive.Disabled}",
                  "style": "solid"
                },
                "type": "border",
                "oldPath": "None"
              },
              "ReadOnly": {
                "value": {
                  "color": "{Forms.ToggleSwitch.Control.Container.BorderColor.Inactive.ReadOnly}",
                  "width": "{Forms.ToggleSwitch.Control.Container.BorderWidth.Inactive.ReadOnly}",
                  "style": "solid"
                },
                "type": "border",
                "oldPath": "None"
              }
            }
          },
          "Width": {
            "SM": {
              "value": "2.25rem",
              "type": "sizing",
              "oldPath": "Forms.ToggleSwitch.Control.SM.Background.Width"
            },
            "MD": {
              "value": "2.75rem",
              "type": "sizing",
              "oldPath": "Forms.ToggleSwitch.Control.MD.Background.Width"
            },
            "LG": {
              "value": "3.25rem",
              "type": "sizing",
              "oldPath": "Forms.ToggleSwitch.Control.LG.Background.Width"
            }
          },
          "Height": {
            "SM": {
              "value": "{core.dimensionREM.20}",
              "type": "sizing",
              "oldPath": "Forms.ToggleSwitch.Control.SM.Background.Height"
            },
            "MD": {
              "value": "{core.dimensionREM.24}",
              "type": "sizing",
              "oldPath": "Forms.ToggleSwitch.Control.MD.Background.Height"
            },
            "LG": {
              "value": "{core.dimensionREM.28}",
              "type": "sizing",
              "oldPath": "Forms.ToggleSwitch.Control.LG.Background.Height"
            }
          },
          "Padding": {
            "SM": {
              "value": "{core.dimensionPX.2}",
              "type": "spacing",
              "oldPath": "Forms.ToggleSwitch.Control.SM.Background.Padding"
            },
            "MD": {
              "value": "{core.dimensionPX.2}",
              "type": "spacing",
              "oldPath": "Forms.ToggleSwitch.Control.MD.Background.Padding"
            },
            "LG": {
              "value": "{core.dimensionPX.2}",
              "type": "spacing",
              "oldPath": "Forms.ToggleSwitch.Control.LG.Background.Padding"
            }
          }
        },
        "AY11Icon": {
          "IconColor": {
            "Active": {
              "Rest": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Foreground.Selected.Fill.Rest"
              },
              "Hover": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Foreground.Selected.Fill.Hover"
              },
              "Pressed": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Foreground.Selected.Fill.Pressed"
              },
              "Focus": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Foreground.Selected.Fill.Focus"
              },
              "Disabled": {
                "value": "{q.content.ondisabled.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Foreground.Selected.Fill.Disabled"
              },
              "ReadOnly": {
                "value": "{q.content.ondisabled.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Foreground.Selected.Fill.ReadOnly"
              }
            },
            "Inactive": {
              "Rest": {
                "value": "{q.content.ondisabled.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Foreground.Selected.Fill.Rest"
              },
              "Hover": {
                "value": "{q.content.ondisabled.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Foreground.Selected.Fill.Hover"
              },
              "Pressed": {
                "value": "{q.content.ondisabled.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Foreground.Selected.Fill.Pressed"
              },
              "Focus": {
                "value": "{q.content.ondisabled.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Foreground.Selected.Fill.Focus"
              },
              "Disabled": {
                "value": "{q.content.ondisabled.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Foreground.Selected.Fill.Disabled"
              },
              "ReadOnly": {
                "value": "{q.content.ondisabled.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Foreground.Selected.Fill.ReadOnly"
              }
            }
          },
          "IconSize": {
            "SM": {
              "value": "{core.dimensionREM.16}",
              "type": "sizing",
              "oldPath": "Forms.ToggleSwitch.Control.SM.A11yIcon.Sizing"
            },
            "MD": {
              "value": "{core.dimensionREM.16}",
              "type": "sizing",
              "oldPath": "Forms.ToggleSwitch.Control.MD.A11yIcon.Sizing"
            },
            "LG": {
              "value": "{core.dimensionREM.16}",
              "type": "sizing",
              "oldPath": "Forms.ToggleSwitch.Control.LG.A11yIcon.Sizing"
            }
          }
        },
        "AY11IconContainer": {
          "PaddingLeftRight": {
            "SM": {
              "value": "{core.dimensionREM.2}",
              "type": "spacing",
              "oldPath": "Forms.ToggleSwitch.Control.SM.IconContainer.PaddingLeftRight"
            },
            "MD": {
              "value": "{core.dimensionREM.2}",
              "type": "spacing",
              "oldPath": "Forms.ToggleSwitch.Control.MD.IconContainer.PaddingLeftRight"
            },
            "LG": {
              "value": "{core.dimensionREM.16}",
              "type": "sizing",
              "oldPath": "Forms.ToggleSwitch.Control.LG.IconContainer.PaddingLeftRight"
            }
          }
        },
        "Knob": {
          "BackgroundColor": {
            "Active": {
              "Rest": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Knob.Surface.Selected.Fill.[state]"
              },
              "Hover": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Knob.Surface.Selected.Fill.[state]"
              },
              "Pressed": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Knob.Surface.Selected.Fill.[state]"
              },
              "Focus": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Knob.Surface.Selected.Fill.[state]"
              },
              "Disabled": {
                "value": "{q.content.ondisabled.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Knob.Surface.Selected.Fill.[state]"
              },
              "ReadOnly": {
                "value": "{q.content.ondisabled.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Knob.Surface.Selected.Fill.[state]"
              }
            },

            "Inactive": {
              "Rest": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Knob.Surface.Unselected.Fill.[state]"
              },
              "Hover": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Knob.Surface.Unselected.Fill.[state]"
              },
              "Pressed": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Knob.Surface.Unselected.Fill.[state]"
              },
              "Focus": {
                "value": "{q.content.onbrand.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Knob.Surface.Unselected.Fill.[state]"
              },
              "Disabled": {
                "value": "{q.content.ondisabled.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Knob.Surface.Unselected.Fill.[state]"
              },
              "ReadOnly": {
                "value": "{q.content.ondisabled.alpha}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Knob.Surface.Unselected.Fill.[state]"
              }
            }
          },
          "BorderColor": {
            "Active": {
              "Rest": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Knob.Surface.Selected.Stroke.[state]"
              },
              "Hover": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Knob.Surface.Selected.Stroke.[state]"
              },
              "Pressed": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Knob.Surface.Selected.Stroke.[state]"
              },
              "Focus": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Knob.Surface.Selected.Stroke.[state]"
              },
              "Disabled": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Knob.Surface.Selected.Stroke.[state]"
              },
              "ReadOnly": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Knob.Surface.Selected.Stroke.[state]"
              }
            },
            "Inactive": {
              "Rest": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Knob.Surface.Unselected.Stroke.[state]"
              },
              "Hover": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Knob.Surface.Unselected.Stroke.[state]"
              },
              "Pressed": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Knob.Surface.Unselected.Stroke.[state]"
              },
              "Focus": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Knob.Surface.Unselected.Stroke.[state]"
              },
              "Disabled": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Knob.Surface.Unselected.Stroke.[state]"
              },
              "ReadOnly": {
                "value": "{q.stroke.none}",
                "type": "color",
                "oldPath": "Forms.ToggleSwitch.Control.Knob.Surface.Unselected.Stroke.[state]"
              }
            }
          },
          "BorderWidht": {
            "Active": {
              "Rest": {
                "value": "0",
                "type": "borderWidth",
                "oldPath": "None"
              },
              "Hover": {
                "value": "0",
                "type": "borderWidth",
                "oldPath": "None"
              },
              "Pressed": {
                "value": "0",
                "type": "borderWidth",
                "oldPath": "None"
              },
              "Focus": {
                "value": "0",
                "type": "borderWidth",
                "oldPath": "None"
              },
              "Disabled": {
                "value": "0",
                "type": "borderWidth",
                "oldPath": "None"
              },
              "ReadOnly": {
                "value": "0",
                "type": "borderWidth",
                "oldPath": "None"
              }
            },
            "Inactive": {
              "Rest": {
                "value": "0",
                "type": "borderWidth",
                "oldPath": "None"
              },
              "Hover": {
                "value": "0",
                "type": "borderWidth",
                "oldPath": "None"
              },
              "Pressed": {
                "value": "0",
                "type": "borderWidth",
                "oldPath": "None"
              },
              "Focus": {
                "value": "0",
                "type": "borderWidth",
                "oldPath": "None"
              },
              "Disabled": {
                "value": "0",
                "type": "borderWidth",
                "oldPath": "None"
              },
              "ReadOnly": {
                "value": "0",
                "type": "borderWidth",
                "oldPath": "None"
              }
            }
          },
          "Border": {
            "Active": {
              "Rest": {
                "value": {
                  "color": "{Forms.ToggleSwitch.Control.Knob.BorderColor.Active.Rest}",
                  "width": "{Forms.ToggleSwitch.Control.Knob.BorderWidth.Active.Rest}",
                  "style": "solid"
                },
                "type": "border",
                "oldPath": "None"
              },
              "Hover": {
                "value": {
                  "color": "{Forms.ToggleSwitch.Control.Knob.BorderColor.Active.Hover}",
                  "width": "{Forms.ToggleSwitch.Control.Knob.BorderWidth.Active.Hover}",
                  "style": "solid"
                },
                "type": "border",
                "oldPath": "None"
              },
              "Pressed": {
                "value": {
                  "color": "{Forms.ToggleSwitch.Control.Knob.BorderColor.Active.Pressed}",
                  "width": "{Forms.ToggleSwitch.Control.Knob.BorderWidth.Active.Pressed}",
                  "style": "solid"
                },
                "type": "border",
                "oldPath": "None"
              },
              "Focus": {
                "value": {
                  "color": "{Forms.ToggleSwitch.Control.Knob.BorderColor.Active.Focus}",
                  "width": "{Forms.ToggleSwitch.Control.Knob.BorderWidth.Active.Focus}",
                  "style": "solid"
                },
                "type": "border",
                "oldPath": "None"
              },
              "Disabled": {
                "value": {
                  "color": "{Forms.ToggleSwitch.Control.Knob.BorderColor.Active.Disabled}",
                  "width": "{Forms.ToggleSwitch.Control.Knob.BorderWidth.Active.Disabled}",
                  "style": "solid"
                },
                "type": "border",
                "oldPath": "None"
              },
              "ReadOnly": {
                "value": {
                  "color": "{Forms.ToggleSwitch.Control.Knob.BorderColor.Active.ReadOnly}",
                  "width": "{Forms.ToggleSwitch.Control.Knob.BorderWidth.Active.ReadOnly}",
                  "style": "solid"
                },
                "type": "border",
                "oldPath": "None"
              }
            },
            "Inactive": {
              "Rest": {
                "value": {
                  "color": "{Forms.ToggleSwitch.Control.Knob.BorderColor.Inactive.Rest}",
                  "width": "{Forms.ToggleSwitch.Control.Knob.BorderWidth.Inactive.Rest}",
                  "style": "solid"
                },
                "type": "border",
                "oldPath": "None"
              },
              "Hover": {
                "value": {
                  "color": "{Forms.ToggleSwitch.Control.Knob.BorderColor.Inactive.Hover}",
                  "width": "{Forms.ToggleSwitch.Control.Knob.BorderWidth.Inactive.Hover}",
                  "style": "solid"
                },
                "type": "border",
                "oldPath": "None"
              },
              "Pressed": {
                "value": {
                  "color": "{Forms.ToggleSwitch.Control.Knob.BorderColor.Inactive.Pressed}",
                  "width": "{Forms.ToggleSwitch.Control.Knob.BorderWidth.Inactive.Pressed}",
                  "style": "solid"
                },
                "type": "border",
                "oldPath": "None"
              },
              "Focus": {
                "value": {
                  "color": "{Forms.ToggleSwitch.Control.Knob.BorderColor.Inactive.Focus}",
                  "width": "{Forms.ToggleSwitch.Control.Knob.BorderWidth.Inactive.Focus}",
                  "style": "solid"
                },
                "type": "border",
                "oldPath": "None"
              },
              "Disabled": {
                "value": {
                  "color": "{Forms.ToggleSwitch.Control.Knob.BorderColor.Inactive.Disabled}",
                  "width": "{Forms.ToggleSwitch.Control.Knob.BorderWidth.Inactive.Disabled}",
                  "style": "solid"
                },
                "type": "border",
                "oldPath": "None"
              },
              "ReadOnly": {
                "value": {
                  "color": "{Forms.ToggleSwitch.Control.Knob.BorderColor.Inactive.ReadOnly}",
                  "width": "{Forms.ToggleSwitch.Control.Knob.BorderWidth.Inactive.ReadOnly}",
                  "style": "solid"
                },
                "type": "border",
                "oldPath": "None"
              }
            }
          },
          "Size": {
            "SM": {
              "value": "{core.dimensionREM.16}",
              "type": "sizing",
              "oldPath": "Forms.ToggleSwitch.Control.SM.Knob.Sizing"
            },
            "MD": {
              "value": "{core.dimensionREM.20}",
              "type": "sizing",
              "oldPath": "Forms.ToggleSwitch.Control.MD.Knob.Sizing"
            },
            "LG": {
              "value": "{core.dimensionREM.24}",
              "type": "sizing",
              "oldPath": "Forms.ToggleSwitch.Control.LG.Knob.Sizing"
            }
          }
        }
      },
      "ControlWithStateLabel": {
        "Container": {
          "ItemSpacing": {
            "SM": {
              "value": "{core.dimensionPX.8}",
              "type": "spacing",
              "oldPath": "Forms.ToggleSwitch.Control.SM.LabelGap"
            },
            "MD": {
              "value": "{core.dimensionPX.8}",
              "type": "spacing",
              "oldPath": "Forms.ToggleSwitch.Control.MD.LabelGap"
            },
            "LG": {
              "value": "{core.dimensionPX.8}",
              "type": "spacing",
              "oldPath": "Forms.ToggleSwitch.Control.LG.LabelGap"
            }
          }
        }
      },
      "Container": {
        "ItemSpacing": {
          "SM": {
            "value": "{core.dimensionREM.8}",
            "type": "spacing",
            "oldPath": "Forms.ToggleSwitch.SM.Gap"
          },
          "MD": {
            "value": "{core.dimensionREM.8}",
            "type": "spacing",
            "oldPath": "Forms.ToggleSwitch.MD.Gap"
          },
          "LG": {
            "value": "{core.dimensionREM.8}",
            "type": "spacing",
            "oldPath": "Forms.ToggleSwitch.LG.Gap"
          }
        }
      },
      "ContentCol": {
        "ItemSpacing": {
          "SM": {
            "value": "{core.dimensionREM.0}",
            "type": "spacing",
            "oldPath": "Forms.ToggleSwitch.SM.ContentColGap"
          },
          "MD": {
            "value": "{core.dimensionREM.0}",
            "type": "spacing",
            "oldPath": "Forms.ToggleSwitch.MD.ContentColGap"
          },
          "LG": {
            "value": "{core.dimensionREM.0}",
            "type": "spacing",
            "oldPath": "Forms.ToggleSwitch.LG.ContentColGap"
          }
        }
      }
    },
    "TextArea": {
      "Input": {
        "MinHeight": {
          "SM": {
            "value": "{core.dimensionREM.64}",
            "type": "sizing",
            "oldPath": "Forms.TextArea.SM.MinHeight"
          },
          "MD": {
            "value": "{core.dimensionREM.80}",
            "type": "sizing",
            "oldPath": "Forms.TextArea.SM.MinHeight"
          },
          "LG": {
            "value": "{core.dimensionREM.112}",
            "type": "sizing",
            "oldPath": "Forms.TextArea.SM.MinHeight"
          }
        }
      }
    }
  },

  "Actions": {
    "TextButton": {
      "Container": {
        "PaddingTopBottom": {
          "XS": {
            "value": "{core.dimensionREM.4}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "SM": {
            "value": "{core.dimensionREM.4}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "MD": {
            "value": "{core.dimensionREM.8}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "LG": {
            "value": "{core.dimensionREM.8}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "XL": {
            "value": "{core.dimensionREM.16}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          }
        },
        "PaddingLeftRight": {
          "XS": {
            "value": "{core.dimensionPX.12}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "SM": {
            "value": "{core.dimensionPX.12}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "MD": {
            "value": "{core.dimensionPX.16}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "LG": {
            "value": "{core.dimensionPX.24}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "XL": {
            "value": "{core.dimensionPX.40}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          }
        },
        "Padding": {
          "XS": {
            "value": "{Action.TextButton.Container.PaddingTopBottom.XS} {Action.TextButton.Container.PaddingLeftRight.XS}",
            "type": "spacing",
            "description": "Do not apply in Figma, use aliases instead.",
            "oldPath": "Action.TextButton.[scale].Padding"
          },
          "SM": {
            "value": "{Action.TextButton.Container.PaddingTopBottom.SM} {Action.TextButton.Container.PaddingLeftRight.SM}",
            "type": "spacing",
            "description": "Do not apply in Figma, use aliases instead.",
            "oldPath": "Action.TextButton.[scale].Padding"
          },
          "MD": {
            "value": "{Action.TextButton.Container.PaddingTopBottom.MD} {Action.TextButton.Container.PaddingLeftRight.MD}",
            "type": "spacing",
            "description": "Do not apply in Figma, use aliases instead.",
            "oldPath": "Action.TextButton.[scale].Padding"
          },
          "LG": {
            "value": "{Action.TextButton.Container.PaddingTopBottom.LG} {Action.TextButton.Container.PaddingLeftRight.LG}",
            "type": "spacing",
            "description": "Do not apply in Figma, use aliases instead.",
            "oldPath": "Action.TextButton.[scale].Padding"
          },
          "XL": {
            "value": "{Action.TextButton.Container.PaddingTopBottom.XL} {Action.TextButton.Container.PaddingLeftRight.XL}",
            "type": "spacing",
            "description": "Do not apply in Figma, use aliases instead.",
            "oldPath": "Action.TextButton.[scale].Padding"
          }
        },
        "ItemSpacing": {
          "XS": {
            "value": "{core.dimensionPX.4}",
            "type": "spacing",
            "oldPath": "Action.TextButton.[scale].ItemSpacing"
          },
          "SM": {
            "value": "{Actions.TextButton.Container.ItemSpacing.XS}",
            "type": "spacing",
            "oldPath": "Action.TextButton.[scale].ItemSpacing"
          },
          "MD": {
            "value": "{Actions.TextButton.Container.ItemSpacing.XS}",
            "type": "spacing",
            "oldPath": "Action.TextButton.[scale].ItemSpacing"
          },
          "LG": {
            "value": "{Actions.TextButton.Container.ItemSpacing.XS}",
            "type": "spacing",
            "oldPath": "Action.TextButton.[scale].ItemSpacing"
          },
          "XL": {
            "value": "{Actions.TextButton.Container.ItemSpacing.XS}",
            "type": "spacing",
            "oldPath": "Action.TextButton.[scale].ItemSpacing"
          }
        }
      }
    },
    "TextDropdown": {
      "Container": {
        "PaddingTop": {
          "XS": {
            "value": "{core.dimensionREM.4}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "SM": {
            "value": "{core.dimensionREM.4}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "MD": {
            "value": "{core.dimensionREM.8}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "LG": {
            "value": "{core.dimensionREM.8}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "XL": {
            "value": "{core.dimensionREM.16}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          }
        },
        "PaddingRight": {
          "XS": {
            "value": "{core.dimensionPX.8}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "SM": {
            "value": "{core.dimensionPX.8}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "MD": {
            "value": "{core.dimensionPX.12}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "LG": {
            "value": "{core.dimensionPX.16}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "XL": {
            "value": "{core.dimensionPX.32}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          }
        },
        "PaddingBottom": {
          "XS": {
            "value": "{core.dimensionREM.4}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "SM": {
            "value": "{core.dimensionREM.4}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "MD": {
            "value": "{core.dimensionREM.8}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "LG": {
            "value": "{core.dimensionREM.8}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "XL": {
            "value": "{core.dimensionREM.16}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          }
        },
        "PaddingLeft": {
          "XS": {
            "value": "{core.dimensionPX.12}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "SM": {
            "value": "{core.dimensionPX.12}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "MD": {
            "value": "{core.dimensionPX.20}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "LG": {
            "value": "{core.dimensionPX.24}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "XL": {
            "value": "{core.dimensionPX.40}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          }
        },
        "Padding": {
          "XS": {
            "value": "{Action.TextDropdown.Container.PaddingTop.XS} {Action.TextDropdown.Container.PaddingRight.XS} {Action.TextDropdown.Container.PaddingBottom.XS} {Action.TextDropdown.Container.PaddingLeft.XS}",
            "type": "spacing",
            "description": "Do not apply in Figma, use aliases instead.",
            "oldPath": "Action.TextDropdown.[scale].Pading"
          },
          "SM": {
            "value": "{Action.TextDropdown.Container.PaddingTop.SM} {Action.TextDropdown.Container.PaddingRight.SM} {Action.TextDropdown.Container.PaddingBottom.SM} {Action.TextDropdown.Container.PaddingLeft.SM}",
            "type": "spacing",
            "description": "Do not apply in Figma, use aliases instead.",
            "oldPath": "Action.TextDropdown.[scale].Pading"
          },
          "MD": {
            "value": "{Action.TextDropdown.Container.PaddingTop.MD} {Action.TextDropdown.Container.PaddingRight.MD} {Action.TextDropdown.Container.PaddingBottom.MD} {Action.TextDropdown.Container.PaddingLeft.MD}",
            "type": "spacing",
            "description": "Do not apply in Figma, use aliases instead.",
            "oldPath": "Action.TextDropdown.[scale].Pading"
          },
          "LG": {
            "value": "{Action.TextDropdown.Container.PaddingTop.LG} {Action.TextDropdown.Container.PaddingRight.LG} {Action.TextDropdown.Container.PaddingBottom.LG} {Action.TextDropdown.Container.PaddingLeft.LG}",
            "type": "spacing",
            "description": "Do not apply in Figma, use aliases instead.",
            "oldPath": "Action.TextDropdown.[scale].Pading"
          },
          "XL": {
            "value": "{Action.TextDropdown.Container.PaddingTop.XL} {Action.TextDropdown.Container.PaddingRight.XL} {Action.TextDropdown.Container.PaddingBottom.XL} {Action.TextDropdown.Container.PaddingLeft.XL}",
            "type": "spacing",
            "description": "Do not apply in Figma, use aliases instead.",
            "oldPath": "Action.TextDropdown.[scale].Pading"
          }
        },
        "ItemSpacing": {
          "XS": {
            "value": "{core.dimensionPX.2}",
            "type": "spacing",
            "oldPath": "Action.TextDropdown.[scale].Pading"
          },
          "SM": {
            "value": "{core.dimensionPX.2}",
            "type": "spacing",
            "oldPath": "Action.TextDropdown.[scale].Pading"
          },
          "MD": {
            "value": "{core.dimensionPX.2}",
            "type": "spacing",
            "oldPath": "Action.TextDropdown.[scale].Pading"
          },
          "LG": {
            "value": "{core.dimensionPX.2}",
            "type": "spacing",
            "oldPath": "Action.TextDropdown.[scale].Pading"
          },
          "XL": {
            "value": "{core.dimensionPX.2}",
            "type": "spacing",
            "oldPath": "Action.TextDropdown.[scale].Pading"
          }
        }
      }
    },
    "IconButton": {
      "Container": {
        "Padding": {
          "XS": {
            "value": "{core.dimensionREM.6}",
            "type": "spacing",
            "description": "Use in Figma and coded comp",
            "oldPath": "Action.IconButton.[scale].Padding"
          },
          "SM": {
            "value": "{core.dimensionREM.6}",
            "type": "spacing",
            "description": "Use in Figma and coded comp",
            "oldPath": "Action.IconButton.[scale].Padding"
          },
          "MD": {
            "value": "{core.dimensionREM.8}",
            "type": "spacing",
            "description": "Use in Figma and coded comp",
            "oldPath": "Action.IconButton.[scale].Padding"
          },
          "LG": {
            "value": "{core.dimensionREM.8}",
            "type": "spacing",
            "description": "Use in Figma and coded comp",
            "oldPath": "Action.IconButton.[scale].Padding"
          },
          "XL": {
            "value": "{core.dimensionREM.12}",
            "type": "spacing",
            "description": "Use in Figma and coded comp",
            "oldPath": "Action.IconButton.[scale].Padding"
          }
        },
        "ItemSpacing": {
          "XS": {
            "value": "{core.dimensionPX.4}",
            "type": "spacing",
            "oldPath": "Action.IconButton.[scale].ItemSpacing"
          },
          "SM": {
            "value": "{Actions.TextButton.Container.ItemSpacing.XS}",
            "type": "spacing",
            "oldPath": "Action.IconButton.[scale].ItemSpacing"
          },
          "MD": {
            "value": "{Actions.TextButton.Container.ItemSpacing.XS}",
            "type": "spacing",
            "oldPath": "Action.IconButton.[scale].ItemSpacing"
          },
          "LG": {
            "value": "{Actions.TextButton.Container.ItemSpacing.XS}",
            "type": "spacing",
            "oldPath": "Action.IconButton.[scale].ItemSpacing"
          },
          "XL": {
            "value": "{Actions.TextButton.Container.ItemSpacing.XS}",
            "type": "spacing",
            "oldPath": "Action.IconButton.[scale].ItemSpacing"
          }
        }
      }
    },
    "IconDropdown": {
      "Container": {
        "PaddingTop": {
          "XS": {
            "value": "{core.dimensionREM.6}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "SM": {
            "value": "{core.dimensionREM.6}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "MD": {
            "value": "{core.dimensionREM.8}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "LG": {
            "value": "{core.dimensionREM.8}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "XL": {
            "value": "{core.dimensionREM.12}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          }
        },
        "PaddingRight": {
          "XS": {
            "value": "{core.dimensionREM.1}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "SM": {
            "value": "{core.dimensionREM.1}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "MD": {
            "value": "{core.dimensionREM.1}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "LG": {
            "value": "{core.dimensionREM.0}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "XL": {
            "value": "{core.dimensionREM.0}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          }
        },
        "PaddingBottom": {
          "XS": {
            "value": "{core.dimensionREM.6}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "SM": {
            "value": "{core.dimensionREM.6}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "MD": {
            "value": "{core.dimensionREM.8}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "LG": {
            "value": "{core.dimensionREM.8}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "XL": {
            "value": "{core.dimensionREM.12}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          }
        },
        "PaddingLeft": {
          "XS": {
            "value": "{core.dimensionREM.3}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "SM": {
            "value": "{core.dimensionREM.3}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "MD": {
            "value": "{core.dimensionREM.3}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "LG": {
            "value": "{core.dimensionREM.2}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          },
          "XL": {
            "value": "{core.dimensionREM.4}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use \"Padding\" in coded Comps.",
            "oldPath": "None"
          }
        },
        "Padding": {
          "XS": {
            "value": "{Action.IconDropdown.Container.PaddingTop.XS} {Action.IconDropdown.Container.PaddingRight.XS} {Action.IconDropdown.Container.PaddingBottom.XS} {Action.IconDropdown.Container.PaddingLeft.XS}",
            "type": "spacing",
            "description": "Do not apply in Figma, use aliases instead.",
            "oldPath": "Action.IconDropdown.[scale].Padding"
          },
          "SM": {
            "value": "{Action.IconDropdown.Container.PaddingTop.SM} {Action.IconDropdown.Container.PaddingRight.SM} {Action.IconDropdown.Container.PaddingBottom.SM} {Action.IconDropdown.Container.PaddingLeft.SM}",
            "type": "spacing",
            "description": "Do not apply in Figma, use aliases instead.",
            "oldPath": "Action.IconDropdown.[scale].Padding"
          },
          "MD": {
            "value": "{Action.IconDropdown.Container.PaddingTop.MD} {Action.IconDropdown.Container.PaddingRight.MD} {Action.IconDropdown.Container.PaddingBottom.MD} {Action.IconDropdown.Container.PaddingLeft.MD}",
            "type": "spacing",
            "description": "Do not apply in Figma, use aliases instead.",
            "oldPath": "Action.IconDropdown.[scale].Padding"
          },
          "LG": {
            "value": "{Action.IconDropdown.Container.PaddingTop.LG} {Action.IconDropdown.Container.PaddingRight.LG} {Action.IconDropdown.Container.PaddingBottom.LG} {Action.IconDropdown.Container.PaddingLeft.LG}",
            "type": "spacing",
            "description": "Do not apply in Figma, use aliases instead.",
            "oldPath": "Action.IconDropdown.[scale].Padding"
          },
          "XL": {
            "value": "{Action.IconDropdown.Container.PaddingTop.XL} {Action.IconDropdown.Container.PaddingRight.XL} {Action.IconDropdown.Container.PaddingBottom.XL} {Action.IconDropdown.Container.PaddingLeft.XL}",
            "type": "spacing",
            "description": "Do not apply in Figma, use aliases instead.",
            "oldPath": "Action.IconDropdown.[scale].Padding"
          }
        },
        "ItemSpacing": {
          "XS": {
            "value": "{core.dimensionREM.0}",
            "type": "spacing",
            "oldPath": "Action.IconDropdown.[scale].ItemSpacing"
          },
          "SM": {
            "value": "{core.dimensionREM.0}",
            "type": "spacing",
            "oldPath": "Action.IconDropdown.[scale].ItemSpacing"
          },
          "MD": {
            "value": "{core.dimensionREM.0}",
            "type": "spacing",
            "oldPath": "Action.IconDropdown.[scale].ItemSpacing"
          },
          "LG": {
            "value": "-{core.dimensionREM.2}",
            "type": "spacing",
            "oldPath": "Action.IconDropdown.[scale].ItemSpacing"
          },
          "XL": {
            "value": "-{core.dimensionREM.4}",
            "type": "spacing",
            "oldPath": "Action.IconDropdown.[scale].ItemSpacing"
          }
        }
      }
    },
    "StepperCombo": {
      "Container": {
        "Width": {
          "Vertical": {
            "SM": {
              "value": "{core.dimensionREM.32}",
              "type": "sizing",
              "oldPath": "Action.StepperCombo.[scale].Vertical.Width"
            },
            "MD": {
              "value": "{core.dimensionREM.40}",
              "type": "sizing",
              "oldPath": "Action.StepperCombo.[scale].Vertical.Width"
            },
            "LG": {
              "value": "{core.dimensionREM.48}",
              "type": "sizing",
              "oldPath": "Action.StepperCombo.[scale].Vertical.Width"
            }
          },
          "Horizontal": {
            "SM": {
              "value": "{core.dimensionREM.64}",
              "type": "sizing",
              "oldPath": "Action.StepperCombo.[scale].Horizontal.Width"
            },
            "MD": {
              "value": "{core.dimensionREM.80}",
              "type": "sizing",
              "oldPath": "Action.StepperCombo.[scale].Horizontal.Width"
            },
            "LG": {
              "value": "{core.dimensionREM.96}",
              "type": "sizing",
              "oldPath": "Action.StepperCombo.[scale].Horizontal.Width"
            }
          }
        }
      },
      "DividerWrapper": {
        "PaddingLeftRight": {
          "Vertical": {
            "SM": {
              "value": "{core.dimensionREM.8}",
              "type": "spacing",
              "description": "Figma only! Do not use in coded comps. Allways use <Padding> in coded Comps.",
              "oldPath": "None"
            },
            "MD": {
              "value": "{core.dimensionREM.8}",
              "type": "spacing",
              "description": "Figma only! Do not use in coded comps. Allways use <Padding> in coded Comps.",
              "oldPath": "None"
            },
            "LG": {
              "value": "{core.dimensionREM.8}",
              "type": "spacing",
              "description": "Figma only! Do not use in coded comps. Allways use <Padding> in coded Comps.",
              "oldPath": "None"
            }
          },
          "Horizontal": {
            "SM": {
              "value": "{core.dimensionPX.0}",
              "type": "spacing",
              "description": "Figma only! Do not use in coded comps. Allways use <Padding> in coded Comps.",
              "oldPath": "None"
            },
            "MD": {
              "value": "{core.dimensionPX.0}",
              "type": "spacing",
              "description": "Figma only! Do not use in coded comps. Allways use <Padding> in coded Comps.",
              "oldPath": "None"
            },
            "LG": {
              "value": "{core.dimensionPX.0}",
              "type": "spacing",
              "description": "Figma only! Do not use in coded comps. Allways use <Padding> in coded Comps.",
              "oldPath": "None"
            }
          }
        },
        "PaddingTopBottom": {
          "Vertical": {
            "SM": {
              "value": "{core.dimensionPX.0}",
              "type": "spacing",
              "description": "Figma only! Do not use in coded comps. Allways use <Padding> in coded Comps.",
              "oldPath": "None"
            },
            "MD": {
              "value": "{core.dimensionPX.0}",
              "type": "spacing",
              "description": "Figma only! Do not use in coded comps. Allways use <Padding> in coded Comps.",
              "oldPath": "None"
            },
            "LG": {
              "value": "{core.dimensionPX.0}",
              "type": "spacing",
              "description": "Figma only! Do not use in coded comps. Allways use <Padding> in coded Comps.",
              "oldPath": "None"
            }
          },
          "Horizontal": {
            "SM": {
              "value": "{core.dimensionREM.8}",
              "type": "spacing",
              "description": "Figma only! Do not use in coded comps. Allways use <Padding> in coded Comps.",
              "oldPath": "None"
            },
            "MD": {
              "value": "{core.dimensionREM.8}",
              "type": "spacing",
              "description": "Figma only! Do not use in coded comps. Allways use <Padding> in coded Comps.",
              "oldPath": "None"
            },
            "LG": {
              "value": "{core.dimensionREM.8}",
              "type": "spacing",
              "description": "Figma only! Do not use in coded comps. Allways use <Padding> in coded Comps.",
              "oldPath": "None"
            }
          }
        },
        "Padding": {
          "Vertical": {
            "SM": {
              "value": "{Action.StepperCombo.DividerWrapper.PaddingTopBottom.Vertical.SM} {Action.StepperCombo.DividerWrapper.PaddingLeftRight.Vertical.SM}",
              "type": "spacing",
              "description": "Do not apply in Figma, use aliases <PaddingLeft> and <PaddingRight> instead.",
              "oldPath": "Action.StepperCombo.[scale].Vertical.DividerWrapper.Padding"
            },
            "MD": {
              "value": "{Action.StepperCombo.DividerWrapper.PaddingTopBottom.Vertical.MD} {Action.StepperCombo.DividerWrapper.PaddingLeftRight.Vertical.MD}",
              "type": "spacing",
              "description": "Do not apply in Figma, use aliases <PaddingLeft> and <PaddingRight> instead.",
              "oldPath": "Action.StepperCombo.[scale].Vertical.DividerWrapper.Padding"
            },
            "LG": {
              "value": "{Action.StepperCombo.DividerWrapper.PaddingTopBottom.Vertical.LG} {Action.StepperCombo.DividerWrapper.PaddingLeftRight.Vertical.LG}",
              "type": "spacing",
              "description": "Do not apply in Figma, use aliases <PaddingLeft> and <PaddingRight> instead.",
              "oldPath": "Action.StepperCombo.[scale].Vertical.DividerWrapper.Padding"
            }
          },
          "Horizontal": {
            "SM": {
              "value": "{Action.StepperCombo.DividerWrapper.PaddingTopBottom.Horizontal.SM} {Action.StepperCombo.DividerWrapper.PaddingLeftRight.Horizontal.SM}",
              "type": "spacing",
              "description": "Do not apply in Figma, use aliases <PaddingLeft> and <PaddingRight> instead.",
              "oldPath": "Action.StepperCombo.[scale].Horizontal.DividerWrapper.Padding"
            },
            "MD": {
              "value": "{Action.StepperCombo.DividerWrapper.PaddingTopBottom.Horizontal.MD} {Action.StepperCombo.DividerWrapper.PaddingLeftRight.Horizontal.MD}",
              "type": "spacing",
              "description": "Do not apply in Figma, use aliases <PaddingLeft> and <PaddingRight> instead.",
              "oldPath": "Action.StepperCombo.[scale].Horizontal.DividerWrapper.Padding"
            },
            "LG": {
              "value": "{Action.StepperCombo.DividerWrapper.PaddingTopBottom.Horizontal.LG} {Action.StepperCombo.DividerWrapper.PaddingLeftRight.Horizontal.LG}",
              "type": "spacing",
              "description": "Do not apply in Figma, use aliases <PaddingLeft> and <PaddingRight> instead.",
              "oldPath": "Action.StepperCombo.[scale].Horizontal.DividerWrapper.Padding"
            }
          }
        }
      }
    },
    "Menu": {
      "MenuItem": {
        "Container": {
          "PaddingTopBottom": {
            "value": "{core.dimensionPX.8}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use <Padding> in coded Comps.",
            "oldPath": "None"
          },
          "PaddingLeftRight": {
            "value": "{core.dimensionPX.16}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use <Padding> in coded Comps.",
            "oldPath": "None"
          },
          "Padding": {
            "value": "{Action.Menu.MenuItem.Container.PaddingTopBottom} {Action.Menu.MenuItem.Container.PaddingLeftRight}",
            "type": "spacing",
            "description": "Do not apply in Figma, use aliases <PaddingLeftRight> and <PaddingTopBottom> instead.",
            "oldPath": "Action.Menu.MenuItem.Padding"
          },
          "BorderRadius": {
            "value": "{Action.BorderRadius}",
            "type": "borderRadius",
            "description": "Defines the border radius of a single menu item.",
            "oldPath": "Action.Menu.MenuItem.BorderRadius"
          }
        },
        "ContentRow": {
          "ItemSpacing": {
            "value": "{core.dimensionPX.4}",
            "type": "spacing",
            "description": "Adds space between Icons and ContentStack (Label & Description)",
            "oldPath": "Action.Menu.MenuItem.Container.ItemSpacing"
          }
        },
        "ContentStack": {
          "ItemSpacing": {
            "value": "0",
            "type": "spacing",
            "description": "Adds space between Label & Description",
            "oldPath": "Action.Menu.MenuItem.ContentStack.ItemSpacing"
          }
        }
      },
      "MenuSection": {
        "SectionTitleWrapper": {
          "PaddingTop": {
            "value": "{core.dimensionPX.16}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use <Padding> in coded Comps. \nDefines the padding around the section title text.",
            "oldPath": "None"
          },
          "PaddingRight": {
            "value": "{core.dimensionPX.16}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use <Padding> in coded Comps. \nDefines the padding around the section title text.",
            "oldPath": "None"
          },
          "PaddingBottom": {
            "value": "{core.dimensionPX.8}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use <Padding> in coded Comps. \nDefines the padding around the section title text.",
            "oldPath": "None"
          },
          "PaddingLeft": {
            "value": "{core.dimensionPX.16}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use <Padding> in coded Comps. \nDefines the padding around the section title text.",
            "oldPath": "None"
          },
          "Padding": {
            "value": "{Action.Menu.MenuSection.SectionTitleWrapper.PaddingTop} {Action.Menu.MenuSection.SectionTitleWrapper.PaddingRight} {Action.Menu.MenuSection.SectionTitleWrapper.PaddingBottom} {Action.Menu.MenuSection.SectionTitleWrapper.PaddingLeft}",
            "type": "spacing",
            "description": "Do not apply in Figma, use aliases <PaddingTop/Right/Bottom/Left> instead. \nDefines the padding around the section title text.",
            "oldPath": "Action.Menu.Section.SectionTitleWrapper.Padding"
          }
        },
        "SectionTitle": {
          "Typography": {
            "value": "{core.typography.sourceSansPro.semibold.75}",
            "type": "typography",
            "oldPath": "Action.Menu.Section.SectionTitle"
          },
          "TextColor": {
            "value": "{q.content.ondefault.alpha}",
            "type": "color",
            "description": "Apply on section title",
            "oldPath": "Action.Menu.MenuSection.SectionTitle"
          }
        },
        "SectionStack": {
          "ItemSpacing": {
            "value": "{core.dimensionPX.12}",
            "type": "spacing",
            "description": "Defines the space between each menu section",
            "oldPath": "Action.Menu.SectionStack.ItemSpacing"
          },
          "Padding": {
            "value": "{core.dimensionPX.12}",
            "type": "spacing",
            "description": "Use on coded comp and Figma. Defines the padding around all stacked menu sections.",
            "oldPath": "Action.Menu.SectionStack.Padding"
          }
        }
      },
      "Container": {
        "BorderRadius": {
          "value": "{core.borderRadius.LG}",
          "type": "borderRadius",
          "description": "Defines the border radius of the whole menu component",
          "oldPath": "Action.Menu.BorderRadius"
        },
        "BackgroundColor": {
          "value": "{q.background.level_2}",
          "type": "color",
          "oldPath": "Action.Menu.Surface.Color"
        }
      }
    }
  },

  "Feedback": {
    "Loader": {
      "Container": {
        "Size": {
          "SM": {
            "value": "{core.dimensionREM.16}",
            "type": "sizing",
            "oldPath": "Feedback.Loader.[scale].Sizing"
          },
          "MD": {
            "value": "{core.dimensionREM.24}",
            "type": "sizing",
            "oldPath": "Feedback.Loader.[scale].Sizing"
          },
          "LG": {
            "value": "{core.dimensionREM.32}",
            "type": "sizing",
            "oldPath": "Feedback.Loader.[scale].Sizing"
          }
        },
        "Padding": {
          "SM": {
            "value": "{core.dimensionREM.1}",
            "type": "spacing",
            "oldPath": "Feedback.Loader.[scale].Padding"
          },
          "MD": {
            "value": "{core.dimensionREM.2}",
            "type": "spacing",
            "oldPath": "Feedback.Loader.[scale].Padding"
          },
          "LG": {
            "value": "{core.dimensionREM.3}",
            "type": "spacing",
            "oldPath": "Feedback.Loader.[scale].Padding"
          }
        }
      },
      "Background": {
        "BorderColor": {
          "Default": {
            "value": "{Feedback.Brand.Default.Shape.Background}",
            "type": "color",
            "oldPath": "None"
          },
          "Inverted": {
            "value": "{Feedback.Brand.Inverted.Shape.Background}",
            "type": "color",
            "oldPath": "None"
          }
        },
        "BorderWidth": {
          "SM": {
            "value": "{core.dimensionPX.2}",
            "type": "borderWidth",
            "oldPath": "None"
          },
          "MD": {
            "value": "{core.dimensionPX.2}",
            "type": "borderWidth",
            "oldPath": "None"
          },
          "LG": {
            "value": "{core.dimensionPX.3}",
            "type": "borderWidth",
            "oldPath": "None"
          }
        },
        "Border": {
          "SM": {
            "Default": {
              "value": {
                "color": "{Feedback.Loader.Background.BorderColor.Default}",
                "width": "{Feedback.Loader.Background.BorderWidth.SM}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Feedback.Loader.SM.Background.Default"
            },
            "Inverted": {
              "value": {
                "color": "{Feedback.Loader.Background.BorderColor.Inverted}",
                "width": "{Feedback.Loader.Background.BorderWidth.SM}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Feedback.Loader.SM.Background.Inverted"
            }
          },
          "MD": {
            "Default": {
              "value": {
                "color": "{Feedback.Loader.Background.BorderColor.Default}",
                "width": "{Feedback.Loader.Background.BorderWidth.MD}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Feedback.Loader.MD.Background.Default"
            },
            "Inverted": {
              "value": {
                "color": "{Feedback.Loader.Background.BorderColor.Inverted}",
                "width": "{Feedback.Loader.Background.BorderWidth.MD}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Feedback.Loader.MD.Background.Inverted"
            }
          },
          "LG": {
            "Default": {
              "value": {
                "color": "{Feedback.Loader.Background.BorderColor.Default}",
                "width": "{Feedback.Loader.Background.BorderWidth.LG}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Feedback.Loader.LG.Background.Default"
            },
            "Inverted": {
              "value": {
                "color": "{Feedback.Loader.Background.BorderColor.Inverted}",
                "width": "{Feedback.Loader.Background.BorderWidth.LG}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Feedback.Loader.LG.Background.Inverted"
            }
          }
        }
      },

      "Foreground": {
        "BorderColor": {
          "Default": {
            "value": "{Feedback.Brand.Default.Shape.Foreground}",
            "type": "color",
            "oldPath": "None"
          },
          "Inverted": {
            "value": "{Feedback.Brand.Inverted.Shape.Foreground}",
            "type": "color",
            "oldPath": "None"
          }
        },
        "BorderWidth": {
          "SM": {
            "value": "{core.dimensionPX.2}",
            "type": "borderWidth",
            "oldPath": "None"
          },
          "MD": {
            "value": "{core.dimensionPX.2}",
            "type": "borderWidth",
            "oldPath": "None"
          },
          "LG": {
            "value": "{core.dimensionPX.3}",
            "type": "borderWidth",
            "oldPath": "None"
          }
        },
        "Border": {
          "SM": {
            "Default": {
              "value": {
                "color": "{Feedback.Loader.Foreground.BorderColor.Default}",
                "width": "{Feedback.Loader.Foreground.BorderWidth.SM}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Feedback.Loader.SM.Foreground.Default"
            },
            "Inverted": {
              "value": {
                "color": "{Feedback.Loader.Foreground.BorderColor.Inverted}",
                "width": "{Feedback.Loader.Foreground.BorderWidth.SM}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Feedback.Loader.SM.Foreground.Inverted"
            }
          },
          "MD": {
            "Default": {
              "value": {
                "color": "{Feedback.Loader.Foreground.BorderColor.Default}",
                "width": "{Feedback.Loader.Foreground.BorderWidth.MD}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Feedback.Loader.MD.Foreground.Default"
            },
            "Inverted": {
              "value": {
                "color": "{Feedback.Loader.Foreground.BorderColor.Inverted}",
                "width": "{Feedback.Loader.Foreground.BorderWidth.MD}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Feedback.Loader.MD.Foreground.Inverted"
            }
          },
          "LG": {
            "Default": {
              "value": {
                "color": "{Feedback.Loader.Foreground.BorderColor.Default}",
                "width": "{Feedback.Loader.Foreground.BorderWidth.LG}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Feedback.Loader.LG.Foreground.Default"
            },
            "Inverted": {
              "value": {
                "color": "{Feedback.Loader.Foreground.BorderColor.Inverted}",
                "width": "{Feedback.Loader.Foreground.BorderWidth.LG}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Feedback.Loader.LG.Foreground.Inverted"
            }
          }
        }
      }
    },

    "Counter": {
      "Container": {
        "BorderRadius": {
          "SM": {
            "value": "{core.borderRadius.MD}",
            "type": "borderRadius",
            "oldPath": "None"
          },
          "MD": {
            "value": "{Feedback.Counter.Container.BorderRadius.SM}",
            "type": "borderRadius",
            "oldPath": "None"
          },
          "LG": {
            "value": "{Feedback.Counter.Container.BorderRadius.SM}",
            "type": "borderRadius",
            "oldPath": "None"
          }
        },
        "PaddingTopBottom": {
          "SM": {
            "value": "{core.dimensionPX.0}",
            "type": "spacing",
            "oldPath": "None"
          },
          "MD": {
            "value": "{Feedback.Counter.Container.PaddingTopBottom.SM}",
            "type": "spacing",
            "oldPath": "None"
          },
          "LG": {
            "value": "{Feedback.Counter.Container.PaddingTopBottom.SM}",
            "type": "spacing",
            "oldPath": "None"
          }
        },
        "PaddingLeftRight": {
          "SM": {
            "value": "{core.dimensionPX.4}",
            "type": "spacing",
            "oldPath": "None"
          },
          "MD": {
            "value": "{Feedback.Counter.Container.PaddingLeftRight.SM}",
            "type": "spacing",
            "oldPath": "None"
          },
          "LG": {
            "value": "{Feedback.Counter.Container.PaddingLeftRight.SM}",
            "type": "spacing",
            "oldPath": "None"
          }
        },
        "Padding": {
          "SM": {
            "value": "{Feedback.Counter.Container.PaddingTopBottom.SM} {Feedback.Counter.Container.PaddingLeftRight.SM}",
            "type": "spacing",
            "oldPath": "Feedback.Counter.SM.Padding"
          },
          "MD": {
            "value": "{Feedback.Counter.Container.PaddingTopBottom.MD} {Feedback.Counter.Container.PaddingLeftRight.MD}",
            "type": "spacing",
            "oldPath": "Feedback.Counter.MD.Padding"
          },
          "LG": {
            "value": "{Feedback.Counter.Container.PaddingTopBottom.LG} {Feedback.Counter.Container.PaddingLeftRight.LG}",
            "type": "spacing",
            "oldPath": "Feedback.Counter.LG.Padding"
          }
        },
        "ItemSpacing": {
          "SM": {
            "value": "{core.dimensionPX.2}",
            "type": "spacing",
            "oldPath": "Feedback.Counter.SM.ItemSpacing"
          },
          "MD": {
            "value": "{core.dimensionPX.2}",
            "type": "spacing",
            "oldPath": "Feedback.Counter.MD.ItemSpacing"
          },
          "LG": {
            "value": "{core.dimensionPX.2}",
            "type": "spacing",
            "oldPath": "Feedback.Counter.LG.ItemSpacing"
          }
        },
        "BorderColor": {
          "Neutral": {
            "value": "{Feedback.Neutral.SurfaceStroke}",
            "type": "color",
            "oldPath": "None"
          },
          "Warning": {
            "value": "{Feedback.Warning.SurfaceStroke}",
            "type": "color",
            "oldPath": "None"
          },
          "Error": {
            "value": "{Feedback.Error.SurfaceStroke}",
            "type": "color",
            "oldPath": "None"
          }
        },
        "BorderWidth": {
          "SM": {
            "value": "{core.borderWidth.Medium}",
            "type": "borderWidth",
            "oldPath": "None"
          },
          "MD": {
            "value": "{core.borderWidth.Medium}",
            "type": "borderWidth",
            "oldPath": "None"
          },
          "LG": {
            "value": "{core.borderWidth.Medium}",
            "type": "borderWidth",
            "oldPath": "None"
          }
        },
        "Border": {
          "SM": {
            "Neutral": {
              "value": {
                "color": "{Feedback.Counter.Container.BorderColor.Neutral}",
                "width": "{Feedback.Counter.Container.BorderWidth.SM}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Feedback.Counter.SM.Border.Neutral"
            },
            "Warning": {
              "value": {
                "color": "{Feedback.Counter.Container.BorderColor.Warning}",
                "width": "{Feedback.Counter.Container.BorderWidth.SM}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Feedback.Counter.SM.Border.Warning"
            },
            "Error": {
              "value": {
                "color": "{Feedback.Counter.Container.BorderColor.Error}",
                "width": "{Feedback.Counter.Container.BorderWidth.SM}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Feedback.Counter.SM.Border.Error"
            }
          },

          "MD": {
            "Neutral": {
              "value": {
                "color": "{Feedback.Counter.Container.BorderColor.Neutral}",
                "width": "{Feedback.Counter.Container.BorderWidth.MD}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Feedback.Counter.MD.Border.Neutral"
            },
            "Warning": {
              "value": {
                "color": "{Feedback.Counter.Container.BorderColor.Warning}",
                "width": "{Feedback.Counter.Container.BorderWidth.MD}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Feedback.Counter.MD.Border.Warning"
            },
            "Error": {
              "value": {
                "color": "{Feedback.Counter.Container.BorderColor.Error}",
                "width": "{Feedback.Counter.Container.BorderWidth.MD}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Feedback.Counter.MD.Border.Error"
            }
          },

          "LG": {
            "Neutral": {
              "value": {
                "color": "{Feedback.Counter.Container.BorderColor.Neutral}",
                "width": "{Feedback.Counter.Container.BorderWidth.LG}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Feedback.Counter.LG.Border.Neutral"
            },
            "Warning": {
              "value": {
                "color": "{Feedback.Counter.Container.BorderColor.Warning}",
                "width": "{Feedback.Counter.Container.BorderWidth.LG}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Feedback.Counter.LG.Border.Warning"
            },
            "Error": {
              "value": {
                "color": "{Feedback.Counter.Container.BorderColor.Error}",
                "width": "{Feedback.Counter.Container.BorderWidth.LG}",
                "style": "solid"
              },
              "type": "border",
              "oldPath": "Feedback.Counter.LG.Border.Error"
            }
          }
        }
      },
      "Text": {
        "Typography": {
          "SM": {
            "value": "{Forms.SM.Caption}",
            "type": "ty",
            "oldPath": "None (used Forms semantic)"
          },
          "MD": {
            "value": "{Forms.MD.Caption}",
            "type": "ty",
            "oldPath": "None (used Forms semantic)"
          },
          "LG": {
            "value": "{Forms.LG.Caption}",
            "type": "ty",
            "oldPath": "None (used Forms semantic)"
          }
        },
        "TextColor": {
          "Neutral": {
            "value": "{Feedback.Neutral.Text",
            "type": "color",
            "oldPath": "None (used semantic before)"
          },
          "Warning": {
            "value": "{Feedback.Warning.Text",
            "type": "color",
            "oldPath": "None (used semantic before)"
          },
          "Error": {
            "value": "{Feedback.Error.Text",
            "type": "color",
            "oldPath": "None (used semantic before)"
          }
        }
      }
    },

    "Tooltip": {
      "ContentCol": {
        "BorderRadius": {
          "value": "{core.borderRadius.MD}",
          "type": "borderRadius",
          "oldPath": "Feedback.Tooltip.ContentCol.BorderRadius"
        },
        "PaddingTopBottom": {
          "value": "{core.dimensionPX.6}",
          "type": "spacing",
          "description": "Figma Only! Do not apply on codes comps. Use <Padding> instead",
          "oldPath": "None"
        },
        "PaddingLeftRight": {
          "value": "{core.dimensionPX.8}",
          "type": "spacing",
          "description": "Figma Only! Do not apply on codes comps. Use <Padding> instead",
          "oldPath": "None"
        },
        "Padding": {
          "value": "{Feedback.Tooltip.ContentCol.PaddingTopBottom} {Feedback.Tooltip.ContentCol.PaddingLeftRight}",
          "type": "spacing",
          "description": "Do not apply in Figma, use aliases <PaddingTop/Right/Bottom/Left> instead.",
          "oldPath": "Feedback.Tooltip.ContentCol.Padding"
        },
        "BackgroundColor": {
          "value": "{q.surface.inverted}",
          "type": "color",
          "oldPath": "Feedback.Tooltip.SurfaceFill"
        }
      },
      "Nose": {
        "BackgroundColor": {
          "value": "{Feedback.Tooltip.ContentCol.BackgroundColor}",
          "type": "color",
          "oldPath": "None"
        }
      },
      "NoseWrapper": {
        "PaddingTopBottom": {
          "value": "{core.dimensionREM.5}",
          "type": "spacing",
          "description": "Figma AND coded comps! Apply on tooltips where the nose is on the side of the ContentCol. The pading defines the inset of the nose.",
          "oldPath": "Feedback.Tooltip.NoseWrapper.PaddingTopBottom"
        },
        "PaddingLeftRight": {
          "value": "{core.dimensionREM.8}",
          "type": "spacing",
          "description": "Figma AND coded comps! Apply on tooltips where the nose is either above or below the ContentCol. The pading defines the inset of the nose.",
          "oldPath": "Feedback.Tooltip.NoseWrapper.PaddingLeftRight"
        }
      },
      "Container": {
        "MinWidth": {
          "value": "{core.dimensionREM.40}",
          "type": "sizing",
          "description": "Defines the minimum width of the tooltip.",
          "oldPath": "Feedback.Tooltip.MinWidth"
        },
        "MaxWidth": {
          "value": "{core.dimensionREM.80}",
          "type": "sizing",
          "description": "Defines the maximum Width of the tooltip.",
          "oldPath": "Feedback.Tooltip.MaxWidth"
        }
      },
      "Text": {
        "TextColor": {
          "value": "{q.content.oninverted.alpha}",
          "type": "color",
          "oldPath": "Feedback.Tooltip.Content"
        },
        "Typography": {
          "value": "UI.Caption.SM",
          "type": "typography",
          "oldPath": "None (used UI semantic before)"
        }
      }
    },
    "Dialog": {
      "Container": {
        "PaddingTopBottom": {
          "XS": {
            "value": "{core.dimensionPX.16}",
            "type": "spacing",
            "description": "Figma Only! Defines the padding of the whole Dialog component - how much of the blanket is allways visible",
            "oldPath": "None"
          },
          "SM": {
            "value": "{core.dimensionPX.24}",
            "type": "spacing",
            "description": "Figma Only! Defines the padding of the whole Dialog component - how much of the blanket is allways visible",
            "oldPath": "None"
          },
          "MD": {
            "value": "{core.dimensionPX.32}",
            "type": "spacing",
            "description": "Figma Only! Defines the padding of the whole Dialog component - how much of the blanket is allways visible",
            "oldPath": "None"
          },
          "LG": {
            "value": "{core.dimensionPX.48}",
            "type": "spacing",
            "description": "Figma Only! Defines the padding of the whole Dialog component - how much of the blanket is allways visible",
            "oldPath": "None"
          },
          "XL": {
            "value": "{core.dimensionPX.64}",
            "type": "spacing",
            "description": "Figma Only! Defines the padding of the whole Dialog component - how much of the blanket is allways visible",
            "oldPath": "None"
          }
        },
        "PaddingLeftRight": {
          "XS": {
            "value": "{core.dimensionPX.16}",
            "type": "spacing",
            "description": "Figma Only! Defines the padding of the whole Dialog component - how much of the blanket is allways visible",
            "oldPath": "None"
          },
          "SM": {
            "value": "{core.dimensionPX.24}",
            "type": "spacing",
            "description": "Figma Only! Defines the padding of the whole Dialog component - how much of the blanket is allways visible",
            "oldPath": "None"
          },
          "MD": {
            "value": "{core.dimensionPX.32}",
            "type": "spacing",
            "description": "Figma Only! Defines the padding of the whole Dialog component - how much of the blanket is allways visible",
            "oldPath": "None"
          },
          "LG": {
            "value": "{core.dimensionPX.48}",
            "type": "spacing",
            "description": "Figma Only! Defines the padding of the whole Dialog component - how much of the blanket is allways visible",
            "oldPath": "None"
          },
          "XL": {
            "value": "{core.dimensionPX.64}",
            "type": "spacing",
            "description": "Figma Only! Defines the padding of the whole Dialog component - how much of the blanket is allways visible",
            "oldPath": "None"
          }
        },
        "Padding": {
          "XS": {
            "value": "{Feedback.Dialog.Container.PaddingTopBottom.XS} {Feedback.Dialog.Container.PaddingLeftRight.XS}",
            "type": "spacing",
            "description": "Coded comps Only! Defines the padding of the whole Dialog component - how much of the blanket is allways visible",
            "oldPath": "Feedback.Dialog.XS.Padding"
          },
          "SM": {
            "value": "{Feedback.Dialog.Container.PaddingTopBottom.SM} {Feedback.Dialog.Container.PaddingLeftRight.SM}",
            "type": "spacing",
            "description": "Coded comps Only! Defines the padding of the whole Dialog component - how much of the blanket is allways visible",
            "oldPath": "Feedback.Dialog.SM.Padding"
          },
          "MD": {
            "value": "{Feedback.Dialog.Container.PaddingTopBottom.MD} {Feedback.Dialog.Container.PaddingLeftRight.MD}",
            "type": "spacing",
            "description": "Coded comps Only! Defines the padding of the whole Dialog component - how much of the blanket is allways visible",
            "oldPath": "Feedback.Dialog.MD.Padding"
          },
          "LG": {
            "value": "{Feedback.Dialog.Container.PaddingTopBottom.LG} {Feedback.Dialog.Container.PaddingLeftRight.LG}",
            "type": "spacing",
            "description": "Coded comps Only! Defines the padding of the whole Dialog component - how much of the blanket is allways visible",
            "oldPath": "Feedback.Dialog.LG.Padding"
          },
          "XL": {
            "value": "{Feedback.Dialog.Container.PaddingTopBottom.XL} {Feedback.Dialog.Container.PaddingLeftRight.XL}",
            "type": "spacing",
            "description": "Coded comps Only! Defines the padding of the whole Dialog component - how much of the blanket is allways visible",
            "oldPath": "Feedback.Dialog.XL.Padding"
          }
        }
      },
      "DialogCombined": {
        "Container": {
          "MaxWidth": {
            "XS": {
              "value": "400px",
              "type": "sizing",
              "oldPath": "Feedback.Dialog.[scale].MaxWidth"
            },
            "SM": {
              "value": "600px",
              "type": "sizing",
              "oldPath": "Feedback.Dialog.[scale].MaxWidth"
            },
            "MD": {
              "value": "900px",
              "type": "sizing",
              "oldPath": "Feedback.Dialog.[scale].MaxWidth"
            },
            "LG": {
              "value": "1200px",
              "type": "sizing",
              "oldPath": "Feedback.Dialog.[scale].MaxWidth"
            },
            "XL": {
              "value": "1556px",
              "type": "sizing",
              "oldPath": "Feedback.Dialog.[scale].MaxWidth"
            }
          },
          "BorderRadius": {
            "XS": {
              "value": "{core.borderRadius.LG}",
              "type": "borderRadius",
              "oldPath": "Feedback.Dialog.BorderRadius (was scale agnostic before)"
            },
            "SM": {
              "value": "{Feedback.Dialog.DialogCombined.Container.BorderRadius.XS}",
              "type": "borderRadius",
              "oldPath": "Feedback.Dialog.BorderRadius (was scale agnostic before)"
            },
            "MD": {
              "value": "{Feedback.Dialog.DialogCombined.Container.BorderRadius.XS}",
              "type": "borderRadius",
              "oldPath": "Feedback.Dialog.BorderRadius (was scale agnostic before)"
            },
            "LG": {
              "value": "{Feedback.Dialog.DialogCombined.Container.BorderRadius.XS}",
              "type": "borderRadius",
              "oldPath": "Feedback.Dialog.BorderRadius (was scale agnostic before)"
            },
            "XL": {
              "value": "{Feedback.Dialog.DialogCombined.Container.BorderRadius.XS}",
              "type": "borderRadius",
              "oldPath": "Feedback.Dialog.BorderRadius (was scale agnostic before)"
            }
          },
          "BackgroundColor": {
            "value": "{q.background.level_2}",
            "type": "color",
            "oldPath": "Feedback.Dialog.Surface.Color"
          }
        }
      },

      "DialogHeader": {
        "Container": {
          "PaddingTopBottom": {
            "value": "{core.dimensionPX.16}",
            "type": "spacing",
            "description": "Figma Only! Defines the padding of the DialogHeader section",
            "oldPath": "None"
          },
          "PaddingLeftRight": {
            "value": "{core.dimensionPX.16}",
            "type": "spacing",
            "description": "Figma Only! Defines the padding of the DialogHeader section",
            "oldPath": "None"
          },
          "Padding": {
            "value": "{Feedback.Dialog.DialogHeader.Container.PaddingTopBottom} {Feedback.Dialog.DialogHeader.Container.PaddingLeftRight}",
            "type": "spacing",
            "description": "Coded comps only! Defines the padding of the DialogHeader section",
            "oldPath": "Feedback.Dialog.Header.Padding"
          }
        },
        "Title": {
          "Typography": {
            "value": "{UI.Headline.H5}",
            "type": "typography",
            "oldPath": "None (used UI semantic before)"
          },
          "TextColor": {
            "value": "{UI.Headline.Default}",
            "type": "color",
            "oldPath": "None (used UI semantic before)"
          }
        }
      },

      "DialogContent": {
        "Container": {
          "PaddingTopBottom": {
            "value": "{core.dimensionPX.8}",
            "type": "spacing",
            "description": "Figma Only! Defines the padding of the DialogContent section.",
            "oldPath": "None"
          },
          "PaddingLeftRight": {
            "value": "{core.dimensionPX.16}",
            "type": "spacing",
            "description": "Figma Only! Defines the padding of the DialogContent section.",
            "oldPath": "None"
          },
          "Padding": {
            "value": "{Feedback.Dialog.DialogContent.Container.PaddingTopBottom} {Feedback.Dialog.DialogContent.Container.PaddingLeftRight}",
            "type": "spacing",
            "description": "Coded comps only! Defines the padding of the DialogContent section",
            "oldPath": "Feedback.Dialog.Content.Padding"
          }
        },
        "Text": {
          "Typography": {
            "value": "{UI.Paragraph.MD.Regular}",
            "type": "typography",
            "oldPath": "None (used UI semantic before)"
          },
          "TextColor": {
            "value": "{UI.Paragraph.Default}",
            "type": "color",
            "oldPath": "None (used UI semantic before)"
          }
        }
      },
      "DialogFooter": {
        "Container": {
          "PaddingTopBottom": {
            "value": "{core.dimensionPX.8}",
            "type": "spacing",
            "description": "Figma Only! Defines the padding of the DialogFooter section.",

            "oldPath": "None"
          },
          "PaddingLeftRight": {
            "value": "{core.dimensionPX.8}",
            "type": "spacing",
            "description": "Figma Only! Defines the padding of the DialogFooter section.",

            "oldPath": "None"
          },
          "Padding": {
            "value": "{Feedback.Dialog.DialogFooter.Container.PaddingTopBottom} {Feedback.Dialog.DialogFooter.Container.PaddingLeftRight}",
            "type": "spacing",
            "description": "Coded comps only! Defines the padding of the DialogFooter section",
            "oldPath": "Feedback.Dialog.Footer"
          }
        }
      }
    }
  },

  "UI": {
    "Icon": {
      "Container": {
        "Size": {
          "XXS": {
            "value": "{core.dimensionREM.8}",
            "type": "sizing",
            "description": "size of XXS icon",
            "oldPath": "UI.Icon.[scale]"
          },
          "XS": {
            "value": "{core.dimensionREM.12}",
            "type": "sizing",
            "description": "size of XS icon",
            "oldPath": "UI.Icon.[scale]"
          },
          "SM": {
            "value": "{core.dimensionREM.16}",
            "type": "sizing",
            "description": "size of SM icon",
            "oldPath": "UI.Icon.[scale]"
          },
          "MD": {
            "value": "{core.dimensionREM.24}",
            "type": "sizing",
            "description": "size of MD icon",
            "oldPath": "UI.Icon.[scale]"
          },
          "LG": {
            "value": "{core.dimensionREM.32}",
            "type": "sizing",
            "description": "size of LG icon",
            "oldPath": "UI.Icon.[scale]"
          },
          "XL": {
            "value": "{core.dimensionREM.48}",
            "type": "sizing",
            "description": "size of XL icon",
            "oldPath": "UI.Icon.[scale]"
          }
        }
      }
    },
    "Divider": {
      "BorderColor": {
        "value": "{core.color.coolgray.800.opa30}",
        "type": "color",
        "oldPath": "UI.Divider.Stroke"
      },
      "BorderWidth": {
        "value": "{core.dimensionPX.1}",
        "type": "borderWidth",
        "oldPath": "None"
      },
      "Border": {
        "value": {
          "color": "{UI.Divider.BorderColor}",
          "width": "{UI.Divider.BorderWidth}"
        },
        "type": "border",
        "oldPath": "UI.Divider.Border"
      }
    },
    "Blanket": {
      "Container": {
        "BackgroundColor": {
          "value": "{q.surface.blanket}",
          "type": "color",
          "description": "Apply on blanket component",
          "oldPath": "UI.Blanket.Surface"
        }
      }
    },
    "ButtonGroup": {
      "Container": {
        "ItemSpacing": {
          "XS": {
            "value": "{core.dimensionPX.4}",
            "type": "spacing",
            "oldPath": "UI.ButtonGroup.[scale].ItemSpacing"
          },
          "SM": {
            "value": "{core.dimensionPX.4}",
            "type": "spacing",
            "oldPath": "UI.ButtonGroup.[scale].ItemSpacing"
          },
          "MD": {
            "value": "{core.dimensionPX.8}",
            "type": "spacing",
            "oldPath": "UI.ButtonGroup.[scale].ItemSpacing"
          },
          "LG": {
            "value": "{core.dimensionPX.8}",
            "type": "spacing",
            "oldPath": "UI.ButtonGroup.[scale].ItemSpacing"
          },
          "XL": {
            "value": "{core.dimensionPX.8}",
            "type": "spacing",
            "oldPath": "UI.ButtonGroup.[scale].ItemSpacing"
          }
        }
      }
    }
  },
  "Navigation": {
    "TabBar": {
      "ButtonWrapper": {
        "InnerPadding": {
          "SM": {
            "value": "{core.dimensionREM.8}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use <Padding> in coded Comps.",
            "oldPath": "None"
          },
          "MD": {
            "value": "{core.dimensionREM.8}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use <Padding> in coded Comps.",
            "oldPath": "None"
          },
          "LG": {
            "value": "{core.dimensionREM.12}",
            "type": "spacing",
            "description": "Figma only! Do not use in coded comps. Allways use <Padding> in coded Comps.",
            "oldPath": "None"
          }
        },
        "Padding": {
          "Leading": {
            "SM": {
              "value": "0 {Navigation.TabBar.ButtonWrapper.InnerPadding.XS} 0 0",
              "type": "spacing",
              "description": "Coded comps only!",
              "oldPath": "Navigation.TabBar.ButtonWrapper.[scale].Leading.Padding"
            },
            "MD": {
              "value": "0 {Navigation.TabBar.ButtonWrapper.InnerPadding.MD} 0 0",
              "type": "spacing",
              "description": "Coded comps only!.",
              "oldPath": "Navigation.TabBar.ButtonWrapper.[scale].Leading.Padding"
            },
            "LG": {
              "value": "0 {Navigation.TabBar.ButtonWrapper.InnerPadding.LG} 0 0",
              "type": "spacing",
              "description": "Coded comps only!.",
              "oldPath": "Navigation.TabBar.ButtonWrapper.[scale].Leading.Padding"
            }
          },
          "Trailing": {
            "SM": {
              "value": "0 0 0 {Navigation.TabBar.ButtonWrapper.InnerPadding.XS}",
              "type": "spacing",
              "description": "Coded comps only!",
              "oldPath": "Navigation.TabBar.ButtonWrapper.[scale].Trailing.Padding"
            },
            "MD": {
              "value": "0 0 0 {Navigation.TabBar.ButtonWrapper.InnerPadding.MD}",
              "type": "spacing",
              "description": "Coded comps only!.",
              "oldPath": "Navigation.TabBar.ButtonWrapper.[scale].Trailing.Padding"
            },
            "LG": {
              "value": "0 0 0 {Navigation.TabBar.ButtonWrapper.InnerPadding.LG}",
              "type": "spacing",
              "description": "Coded comps only!.",
              "oldPath": "Navigation.TabBar.ButtonWrapper.[scale].Trailing.Padding"
            }
          }
        }
      },
      "Tab": {
        "ContentCol": {
          "PaddingTop": {
            "SM": {
              "value": "{core.dimensionREM.4}",
              "type": "spacing",
              "description": "Defines the topPadding of a tab; Apply on <ContentCol>",
              "oldPath": "Navigation.TabBar.Tab.[scale].ContentCol.TopPadding"
            },
            "MD": {
              "value": "{core.dimensionREM.8}",
              "type": "spacing",
              "description": "Defines the topPadding of a tab; Apply on <ContentCol>",
              "oldPath": "Navigation.TabBar.Tab.[scale].ContentCol.TopPadding"
            },
            "LG": {
              "value": "{core.dimensionREM.8}",
              "type": "spacing",
              "description": "Defines the topPadding of a tab; Apply on <ContentCol>",
              "oldPath": "Navigation.TabBar.Tab.[scale].ContentCol.TopPadding"
            }
          },
          "ItemSpacing": {
            "SM": {
              "value": "{core.dimensionREM.8}",
              "type": "spacing",
              "description": "Defines the gap beteen the tabs label/icon and the <HighlightLIne>",
              "oldPath": "Navigation.TabBar.Tab.[scale].ContentCol.ItemSpacing"
            },
            "MD": {
              "value": "{core.dimensionREM.8}",
              "type": "spacing",
              "description": "Defines the gap beteen the tabs label/icon and the <HighlightLIne>",
              "oldPath": "Navigation.TabBar.Tab.[scale].ContentCol.ItemSpacing"
            },
            "LG": {
              "value": "{core.dimensionREM.8}",
              "type": "spacing",
              "description": "Defines the gap beteen the tabs label/icon and the <HighlightLIne>",
              "oldPath": "Navigation.TabBar.Tab.[scale].ContentCol.ItemSpacing"
            }
          }
        },
        "ContentRow": {
          "PaddingLeftRight": {
            "SM": {
              "value": "{core.dimensionPX.12}",
              "type": "spacing",
              "description": "Defines the padding left and right of <ContentRow>",
              "oldPath": "Navigation.TabBar.Tab.[scale].ContentRow.PaddingLeftRight"
            },
            "MD": {
              "value": "{core.dimensionPX.12}",
              "type": "spacing",
              "description": "Defines the padding left and right of <ContentRow>",
              "oldPath": "Navigation.TabBar.Tab.[scale].ContentRow.PaddingLeftRight"
            },
            "LG": {
              "value": "{core.dimensionPX.12}",
              "type": "spacing",
              "description": "Defines the padding left and right of <ContentRow>",
              "oldPath": "Navigation.TabBar.Tab.[scale].ContentRow.PaddingLeftRight"
            }
          },
          "ItemSpacing": {
            "SM": {
              "value": "{core.dimensionPX.2}",
              "type": "spacing",
              "description": "Defines the gap between the icon and the label of a tab. Apply on <ContentRow>",
              "oldPath": "Navigation.TabBar.Tab.[scale].ContentRow.ItemSpacing"
            },
            "MD": {
              "value": "{core.dimensionPX.2}",
              "type": "spacing",
              "description": "Defines the gap between the icon and the label of a tab. Apply on <ContentRow>",
              "oldPath": "Navigation.TabBar.Tab.[scale].ContentRow.ItemSpacing"
            },
            "LG": {
              "value": "{core.dimensionPX.4}",
              "type": "spacing",
              "description": "Defines the gap between the icon and the label of a tab. Apply on <ContentRow>",
              "oldPath": "Navigation.TabBar.Tab.[scale].ContentRow.ItemSpacing"
            }
          }
        },
        "HighlightLine": {
          "Height": {
            "SM": {
              "value": "{core.dimensionPX.2}",
              "type": "sizing",
              "description": "Defines the thickness of the highlight line.\nApply on <HighlightLine>",
              "oldPath": "Navigation.TabBar.Tab.[scale].HighlightLine.Height"
            },
            "MD": {
              "value": "{core.dimensionPX.2}",
              "type": "sizing",
              "description": "Defines the thickness of the highlight line.\nApply on <HighlightLine>",
              "oldPath": "Navigation.TabBar.Tab.[scale].HighlightLine.Height"
            },
            "LG": {
              "value": "{core.dimensionPX.2}",
              "type": "sizing",
              "description": "Defines the thickness of the highlight line.\nApply on <HighlightLine>",
              "oldPath": "Navigation.TabBar.Tab.[scale].HighlightLine.Height"
            }
          },
          "BackgroundColor": {
            "Active": {
              "Rest": {
                "value": "{q.content.ondefault.brand.rest}",
                "type": "color",
                "description": " Apply as fill on HightlightLine",
                "oldPath": "Navigation.TabBar.Tab.HighlightLine.SurfaceFill.Selected.Rest"
              },
              "Hover": {
                "value": "{q.content.ondefault.brand.rest}",
                "type": "color",
                "description": " Apply as fill on HightlightLine",
                "oldPath": "Navigation.TabBar.Tab.HighlightLine.SurfaceFill.Selected.Hover"
              },
              "Pressed": {
                "value": "{q.content.ondefault.brand.rest}",
                "type": "color",
                "description": " Apply as fill on HightlightLine",
                "oldPath": "Navigation.TabBar.Tab.HighlightLine.SurfaceFill.Selected.Pressed"
              },
              "Focus": {
                "value": "{q.content.ondefault.brand.rest}",
                "type": "color",
                "description": " Apply as fill on HightlightLine",
                "oldPath": "Navigation.TabBar.Tab.HighlightLine.SurfaceFill.Selected.Focus"
              }
            },
            "Inactive": {
              "Rest": {
                "value": "{q.content.ondefault.brand.rest}",
                "type": "color",
                "description": " Apply as fill on HightlightLine",
                "oldPath": "Navigation.TabBar.Tab.HighlightLine.SurfaceFill.Unselected.Rest"
              },
              "Hover": {
                "value": "{q.content.ondefault.brand.rest}",
                "type": "color",
                "description": " Apply as fill on HightlightLine",
                "oldPath": "Navigation.TabBar.Tab.HighlightLine.SurfaceFill.Unselected.Hover"
              },
              "Pressed": {
                "value": "{q.content.ondefault.brand.rest}",
                "type": "color",
                "description": " Apply as fill on HightlightLine",
                "oldPath": "Navigation.TabBar.Tab.HighlightLine.SurfaceFill.Unselected.Pressed"
              },
              "Focus": {
                "value": "{q.content.ondefault.brand.rest}",
                "type": "color",
                "description": " Apply as fill on HightlightLine",
                "oldPath": "Navigation.TabBar.Tab.HighlightLine.SurfaceFill.Unselected.Focus"
              },
              "Disabled": {
                "value": "{q.content.ondefault.brand.rest}",
                "type": "color",
                "description": " Apply as fill on HightlightLine",
                "oldPath": "Navigation.TabBar.Tab.HighlightLine.SurfaceFill.Unselected.Disabled"
              }
            }
          },
          "Opacity": {
            "Active": {
              "Rest": {
                "value": "1",
                "type": "opacity",
                "description": " Controls the opacity of the HighlightLine",
                "oldPath": "Navigation.TabBar.Tab.HighlightLine.Opacity.Selected.Rest"
              },
              "Hover": {
                "value": "1",
                "type": "opacity",
                "description": " Controls the opacity of the HighlightLine",
                "oldPath": "Navigation.TabBar.Tab.HighlightLine.Opacity.Selected.Hover"
              },
              "Pressed": {
                "value": "1",
                "type": "opacity",
                "description": " Controls the opacity of the HighlightLine",
                "oldPath": "Navigation.TabBar.Tab.HighlightLine.Opacity.Selected.Pressed"
              },
              "Focus": {
                "value": "0",
                "type": "opacity",
                "description": " Controls the opacity of the HighlightLine",
                "oldPath": "Navigation.TabBar.Tab.HighlightLine.Opacity.Selected.Focus"
              }
            },
            "Inactive": {
              "Rest": {
                "value": "0",
                "type": "opacity",
                "description": " Controls the opacity of the HighlightLine",
                "oldPath": "Navigation.TabBar.Tab.HighlightLine.Opacity.Unselected.Rest"
              },
              "Hover": {
                "value": "0",
                "type": "opacity",
                "description": " Controls the opacity of the HighlightLine",
                "oldPath": "Navigation.TabBar.Tab.HighlightLine.Opacity.Unselected.Hover"
              },
              "Pressed": {
                "value": "0",
                "type": "opacity",
                "description": " Controls the opacity of the HighlightLine",
                "oldPath": "Navigation.TabBar.Tab.HighlightLine.Opacity.Unselected.Pressed"
              },
              "Focus": {
                "value": "0",
                "type": "opacity",
                "description": " Controls the opacity of the HighlightLine",
                "oldPath": "Navigation.TabBar.Tab.HighlightLine.Opacity.Unselected.Focus"
              },
              "Disabled": {
                "value": "0",
                "type": "opacity",
                "description": " Controls the opacity of the HighlightLine",
                "oldPath": "Navigation.TabBar.Tab.HighlightLine.Opacity.Unselected.Disabled"
              }
            }
          }
        },
        "Label": {
          "TextColor": {
            "Active": {
              "Rest": {
                "value": "{q.content.ondefault.brand.rest}",
                "type": "color",
                "description": "Defines the color of the label of a tab. Apply on <label>",
                "oldPath": "Navigation.TabBar.Tab.Label.Selected.Rest"
              },
              "Hover": {
                "value": "{q.content.ondefault.brand.rest}",
                "type": "color",
                "description": "Defines the color of the label of a tab. Apply on <label>",
                "oldPath": "Navigation.TabBar.Tab.Label.Selected.Hover"
              },
              "Pressed": {
                "value": "{q.content.ondefault.brand.rest}",
                "type": "color",
                "description": "Defines the color of the label of a tab. Apply on <label>",
                "oldPath": "Navigation.TabBar.Tab.Label.Selected.Pressed"
              },
              "Focus": {
                "value": "{q.content.ondefault.brand.rest}",
                "type": "color",
                "description": "Defines the color of the label of a tab. Apply on <label>",
                "oldPath": "Navigation.TabBar.Tab.Label.Selected.Focus"
              }
            },
            "Inactive": {
              "Rest": {
                "value": "{q.content.ondefault.alpha}",
                "type": "color",
                "description": "Defines the color of the label of a tab. Apply on <label>",
                "oldPath": "Navigation.TabBar.Tab.Label.unselected.Rest"
              },
              "Hover": {
                "value": "{q.content.ondefault.alpha}",
                "type": "color",
                "description": "Defines the color of the label of a tab. Apply on <label>",
                "oldPath": "Navigation.TabBar.Tab.Label.unselected.Hover"
              },
              "Pressed": {
                "value": "{q.content.ondefault.alpha}",
                "type": "color",
                "description": "Defines the color of the label of a tab. Apply on <label>",
                "oldPath": "Navigation.TabBar.Tab.Label.unselected.Pressed"
              },
              "Focus": {
                "value": "{q.content.ondefault.alpha}",
                "type": "color",
                "description": "Defines the color of the label of a tab. Apply on <label>",
                "oldPath": "Navigation.TabBar.Tab.Label.unselected.Focus"
              },
              "Disabled": {
                "value": "{q.content.ondisabled.alpha}",
                "type": "color",
                "description": "Defines the color of the label of a tab. Apply on <label>",
                "oldPath": "Navigation.TabBar.Tab.Label.unselected.Disabled"
              }
            }
          },
          "Typography": {
            "SM": {
              "value": "Action.SM.Label",
              "type": "typography",
              "oldPath": "None (used Action semantic before)"
            },
            "MD": {
              "value": "Action.MD.Label",
              "type": "typography",
              "oldPath": "None (used Action semantic before)"
            },
            "LG": {
              "value": "Action.LG.Label",
              "type": "typography",
              "oldPath": "None (used Action semantic before)"
            }
          }
        },

        "Icon": {
          "IconSize": {
            "SM": {
              "value": "{core.dimensionREM.12}",
              "type": "sizing",
              "description": "Defines height and width of the icon of a tab",
              "oldPath": "Navigation.TabBar.Tab.[scale].Icon.Sizing"
            },
            "MD": {
              "value": "{core.dimensionREM.16}",
              "type": "sizing",
              "description": "Defines height and width of the icon of a tab",
              "oldPath": "Navigation.TabBar.Tab.[scale].Icon.Sizing"
            },
            "LG": {
              "value": "{core.dimensionREM.16}",
              "type": "sizing",
              "description": "Defines height and width of the icon of a tab",
              "oldPath": "Navigation.TabBar.Tab.[scale].Icon.Sizing"
            }
          },
          "IconColor": {
            "Active": {
              "Rest": {
                "value": "{q.content.ondefault.brand.rest}",
                "type": "color",
                "description": "Defines the color of the label of a tab. Apply on <label>",
                "oldPath": "Navigation.TabBar.Tab.Icon.Selected.Rest"
              },
              "Hover": {
                "value": "{q.content.ondefault.brand.rest}",
                "type": "color",
                "description": "Defines the color of the label of a tab. Apply on <label>",
                "oldPath": "Navigation.TabBar.Tab.Icon.Selected.Hover"
              },
              "Pressed": {
                "value": "{q.content.ondefault.brand.rest}",
                "type": "color",
                "description": "Defines the color of the label of a tab. Apply on <label>",
                "oldPath": "Navigation.TabBar.Tab.Icon.Selected.Pressed"
              },
              "Focus": {
                "value": "{q.content.ondefault.brand.rest}",
                "type": "color",
                "description": "Defines the color of the label of a tab. Apply on <label>",
                "oldPath": "Navigation.TabBar.Tab.Icon.Selected.Focus"
              }
            },
            "Inactive": {
              "Rest": {
                "value": "{q.content.ondefault.alpha}",
                "type": "color",
                "description": "Defines the color of the label of a tab. Apply on <label>",
                "oldPath": "Navigation.TabBar.Tab.Icon.Unelected.Rest"
              },
              "Hover": {
                "value": "{q.content.ondefault.alpha}",
                "type": "color",
                "description": "Defines the color of the label of a tab. Apply on <label>",
                "oldPath": "Navigation.TabBar.Tab.Icon.Unelected.Hover"
              },
              "Pressed": {
                "value": "{q.content.ondefault.alpha}",
                "type": "color",
                "description": "Defines the color of the label of a tab. Apply on <label>",
                "oldPath": "Navigation.TabBar.Tab.Icon.Unelected.Presssed"
              },
              "Focus": {
                "value": "{q.content.ondefault.alpha}",
                "type": "color",
                "description": "Defines the color of the label of a tab. Apply on <label>",
                "oldPath": "Navigation.TabBar.Tab.Icon.Unelected.Focus"
              },
              "Disabled": {
                "value": "{q.content.ondisabled.alpha}",
                "type": "color",
                "description": "Defines the color of the label of a tab. Apply on <label>",
                "oldPath": "Navigation.TabBar.Tab.Icon.Unelected.Disabled"
              }
            }
          }
        }
      }
    }
  }
}
